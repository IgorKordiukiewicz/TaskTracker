@using System.Text.Json;
@using System.Text;
@using System.Net;
@using Headers = IEnumerable<(string Name, string Value)>;

@code {
    // Dependencies have to be manually passed from parent component, because [Inject]/@Inject injects them after parent initialization
    private readonly HttpClient _httpClient;
    private readonly IDialogService _dialogService;

    public RequestHandler(HttpClient httpClient, IDialogService dialogService)
    {
        _httpClient = httpClient;
        _dialogService = dialogService;
    }

    public async Task<TResponse?> GetAsync<TResponse>(string url)
    {
        var requestMessage = CreateRequestMessage(HttpMethod.Get, url);

        return await GetResponseContent<TResponse>(await _httpClient.SendAsync(requestMessage));    
    }

    public async Task<TResponse?> PostAsync<TResponse>(string url)
        => await PostAsync<TResponse, object>(url, (object?)null);

    public async Task<TResponse?> PostAsync<TResponse, TBody>(string url, TBody? body)
        where TBody : class
    {
        var requestMessage = CreateRequestMessage(HttpMethod.Post, url);
        SetRequestMessageContent(requestMessage, body);

        return await GetResponseContent<TResponse>(await _httpClient.SendAsync(requestMessage));
    }

    public async Task PostAsync(string url)
        => await PostAsync(url, (object?)null);

    public async Task PostAsync<TBody>(string url, TBody? body)
        where TBody : class
    {
        var requestMessage = CreateRequestMessage(HttpMethod.Post, url);
        SetRequestMessageContent(requestMessage, body);

        var response = await _httpClient.SendAsync(requestMessage);

        if(!response.IsSuccessStatusCode)
        {
            await DisplayErrorMessageBox(response);
        }
    }

    private async Task<TResponse?> GetResponseContent<TResponse>(HttpResponseMessage response) 
    {
        if (response.IsSuccessStatusCode)
        {
            return await response.Content.ReadFromJsonAsync<TResponse>();
        }
        else
        {
            await DisplayErrorMessageBox(response);
            return default;
        }
    }

    private HttpRequestMessage CreateRequestMessage(HttpMethod method, string url)
        => new HttpRequestMessage()
        {
            Method = method,
            RequestUri = new Uri(_httpClient.BaseAddress + url)
        };

    private void SetRequestMessageContent<TBody>(HttpRequestMessage message, TBody? body)
        where TBody : class
    {
        if(body is null)
        {
            return;
        }

        var json = JsonSerializer.Serialize(body);
        var content = new StringContent(json, Encoding.UTF8, "application/json");
        message.Content = content;
    }

    private async Task DisplayErrorMessageBox(HttpResponseMessage response)
    {
        var message = response.StatusCode != HttpStatusCode.InternalServerError ? await response.Content.ReadAsStringAsync() : string.Empty;
        await _dialogService.ShowMessageBox($"{(int)response.StatusCode} {response.ReasonPhrase}", message);
    }
}
