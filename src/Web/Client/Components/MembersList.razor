@typeparam TMember where TMember : IMemberVM
@inject RequestHandler _requestHandler

<MudPaper>
    <MudList>
        @foreach (var member in Members)
        {
            <MudListItem Icon="@Icons.Material.Filled.Person">
                <div class="d-flex justify-space-between align-center show-on-hover-parent">
                    @member.Name
                    @if (IsMembersEditor)
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.Clear" Color="Color.Error" OnClick="() => RemoveMember(member.Id)"
                                       Class="@GetRemoveIconButtonClass(member)"></MudIconButton>
                    }
                </div>
            </MudListItem>
        }
    </MudList>
</MudPaper>

@code {
    [Parameter]
    public required string ApiUrl { get; init; }

    [Parameter]
    public required bool IsMembersEditor { get; init; }

    [Parameter]
    public required IReadOnlyList<TMember> Members { get; set; }

    [Parameter]
    public EventCallback MemberRemoved { get; set; }

    private async Task RemoveMember(Guid memberId)
    {
        await _requestHandler.PostAsync(ApiUrl + $"/{memberId}/remove");
        await MemberRemoved.InvokeAsync();
    }

    private string GetRemoveIconButtonClass(TMember member)
    {
        if(member is OrganizationMemberVM organizationMember)
        {
            return organizationMember.Owner ? "invisible" : "show-on-hover";
        }

        return "show-on-hover";
    }
}
