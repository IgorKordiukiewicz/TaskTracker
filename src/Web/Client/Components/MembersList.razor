@typeparam TMember where TMember : IMemberVM
@typeparam TPermissions where TPermissions: struct, Enum

<MudPaper>
    <MudList>
        @foreach (var member in Members)
        {
            <MudListItem>
                <div class="d-flex justify-space-between align-center show-on-hover-parent">
                    <div class="d-flex gap-3 align-center">
                        <UserAvatar Name="@member.Name" UserId="@member.UserId"></UserAvatar>
                        @member.Name
                    </div>
                    <div class="d-flex gap-3 align-center">
                        @if (RolesVM is not null && ManageRolesPermission)
                        {
                            <div style="max-width: 400px;">
                                <MudSelect Value="@GetRoleVM(member.RoleId)" AnchorOrigin="Origin.BottomCenter" ToStringFunc="x => x.Name" T="RoleVM<TPermissions>"
                                           Variant="Variant.Outlined" Label="Role" ValueChanged="e => UpdateRole(member.Id, e.Id)">
                                    @foreach (var role in RolesVM.Roles)
                                    {
                                        <MudSelectItem Value="@role"></MudSelectItem>
                                    }
                                </MudSelect>
                            </div>
                        }
                        @if(RemoveMembersPermission)
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.Clear" Color="Color.Error" OnClick="@(() => RemoveMember(member.Id))"
                                Class="@GetRemoveIconButtonClass(member)"></MudIconButton>
                        }
                    </div>
                </div>
            </MudListItem>
        }
    </MudList>
</MudPaper>

<ConfirmDeleteBox @ref="_confirmDeleteBox"></ConfirmDeleteBox>

@code {
    [Parameter]
    public required bool ManageRolesPermission { get; init; }

    [Parameter]
    public required bool RemoveMembersPermission { get; init; }

    [Parameter]
    public required IReadOnlyList<TMember> Members { get; set; }

    [Parameter]
    public required RolesVM<TPermissions>? RolesVM { get; set; }

    [Parameter]
    public required Func<Guid, UpdateMemberRoleDto, Task> UpdateRoleFunc { get; set; }

    [Parameter]
    public required Func<Guid, Task> RemoveMemberFunc { get; set; }

    [Parameter]
    public EventCallback MembersUpdated { get; set; }

    private ConfirmDeleteBox _confirmDeleteBox = null!;

    private async Task RemoveMember(Guid memberId)
    {
        if (!await _confirmDeleteBox.Show("Are you sure you want to remove this member?"))
        {
            return;
        }

        await RemoveMemberFunc(memberId);
        await MembersUpdated.InvokeAsync();
    }

    private async Task UpdateRole(Guid memberId, Guid newRoleId)
    {
        var model = new UpdateMemberRoleDto(newRoleId);
        await UpdateRoleFunc(memberId, model);
        await MembersUpdated.InvokeAsync();
    }

    private string GetRemoveIconButtonClass(TMember member)
    {
        if(member is OrganizationMemberVM organizationMember)
        {
            return organizationMember.Owner ? "invisible" : "show-on-hover";
        }

        return "show-on-hover";
    }

    private RoleVM<TPermissions> GetRoleVM(Guid roleId)
        => RolesVM!.Roles.First(x => x.Id == roleId);
}
