@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Web.Client.Common;

@inject NavigationManager _navigationManager
@inject UserDataService _userDataService

<AuthorizeView>
    <Authorized>
        @if (_userDataService.CurrentUserVM is not null)
        {
            <UserAvatar Name="@_userDataService.CurrentUserVM.FullName" UserId="@_userDataService.CurrentUserVM.Id" Clickable="true" OnClick="() => { _userSettingsPopup?.Open(); }"></UserAvatar>
            <UserSettingsPopup @ref="_userSettingsPopup" SignOutClicked="BeginSignOut"></UserSettingsPopup>
        }
        else
        {
            <a href="#" @onclick="BeginSignOut">Sign Out</a>
        }
    </Authorized>
    <NotAuthorized>
        <a href="authentication/login">Sign In</a>
    </NotAuthorized>
</AuthorizeView>

@code {
    UserSettingsPopup? _userSettingsPopup;

    protected override async Task OnInitializedAsync()
    {
        _userDataService.SignedIn += () => StateHasChanged();
        _userDataService.SignedOut += () => StateHasChanged();
        await _userDataService.UpdateUserData();
    }

    private void BeginSignOut()
    {
        _navigationManager.NavigateToLogout("authentication/logout");
    }
}
