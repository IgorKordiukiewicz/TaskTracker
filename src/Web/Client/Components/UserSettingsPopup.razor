@inject UserDataService _userDataService
@inject UsersService _usersService

<MudOverlay @bind-Visible="_visible" DarkBackground="true" AutoClose="false" Class="d-flex align-center justify-end">
    <MudPaper style="height: 100vh; width: 400px; border-radius: 0px;" Class="d-flex flex-column justify-space-between pa-4">
        <div class="d-flex flex-column">
            <div class="d-flex align-top justify-space-between">
                <div class="d-flex gap-3 align-center">
                    <UserAvatar Name="@_userDataService.CurrentUserVM!.FullName" />
                    <div class="d-flex flex-column">
                        <MudText Typo="Typo.subtitle1">
                            @_userDataService.CurrentUserVM.FullName
                        </MudText>
                        <MudText Typo="Typo.subtitle2">
                            @_userDataService.CurrentUserVM.Email
                        </MudText>
                    </div>

                </div>
                <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="Close" />
            </div>
            <div class="mt-5">
                <div class="d-flex justify-space-between align-center">
                    <MudText Typo="Typo.h5">
                        Profile
                    </MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="() => { _nameEditForm.Open(); }" Style="@(_nameEditForm.Visible ? "visibility: hidden;" : string.Empty)" />
                </div>
                <MudDivider />
                <MudTextField T="string" Label="First Name" Variant="Variant.Filled" Disabled="!_nameEditForm.Visible" @bind-Value="_nameEditForm.FirstName" />
                <MudTextField T="string" Label="Last Name" Variant="Variant.Filled" Disabled="!_nameEditForm.Visible" @bind-Value="_nameEditForm.LastName" />
                @if (_nameEditForm.Visible)
                {
                    <div class="d-flex gap-2 justify-end mt-2">
                        <MudButton Variant="Variant.Filled" OnClick="() => { _nameEditForm.Close(); }">Cancel</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="!_nameEditForm.IsValid()" OnClick="UpdateUserName">Save</MudButton>
                    </div>
                }
            </div>

        </div>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="async () => { Close(); await SignOutClicked.InvokeAsync(); }">
            Sign Out
        </MudButton>
    </MudPaper>
</MudOverlay>

@code {
    [Parameter]
    public EventCallback SignOutClicked { get; set; }

    private bool _visible = false;

    private class NameEditForm : DialogForm
    {
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;

        public override bool IsValid()
            => !string.IsNullOrWhiteSpace(FirstName) && !string.IsNullOrWhiteSpace(LastName);
    }
    private NameEditForm _nameEditForm = new();

    public void Open()
    {
        if(_userDataService.CurrentUserVM is null)
        {
            return;
        }

        _visible = true;
        InitNameEditForm();
    }

    private void Close()
    {
        _visible = false;
        _nameEditForm = new();
    }

    private async Task UpdateUserName()
    {
        if(_userDataService.CurrentUserVM is null || !_nameEditForm.IsValid())
        {
            return;
        }

        var model = new UpdateUserNameDto(_nameEditForm.FirstName, _nameEditForm.LastName);
        _ = await _usersService.UpdateName(_userDataService.CurrentUserVM.Id, model);

        await _userDataService.UpdateUserData();
        _nameEditForm = new();
        InitNameEditForm();
    }

    private void InitNameEditForm()
    {
        _nameEditForm.FirstName = _userDataService.CurrentUserVM!.FirstName;
        _nameEditForm.LastName = _userDataService.CurrentUserVM!.LastName;
    }
}
