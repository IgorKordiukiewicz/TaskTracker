@using Web.Client.Common;
@typeparam TPermissions where TPermissions: struct, Enum

@inject RequestHandler _requestHandler

@if(RolesVM is not null)
{
    <MudPaper Class="pa-4">
        <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" Class="mb-2" OnClick="() => _createRoleForm.Open()">Create</MudButton>
        <MudGrid Spacing="3">
            @foreach (var role in _rolesData)
            {
                <MudItem md="12" Class="d-flex gap-2 flex-column">
                    <div class="d-flex gap-2 align-center">
                        @if(role.NameEditEnabled)
                        {
                            <MudTextField Variant="Variant.Text" @bind-Value="role.NameEditValue" />
                            <MudButton Variant="Variant.Filled" OnClick="() => CancelNameEdit(role)">Cancel</MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="() => UpdateName(role)" Disabled="@(role.NameEditValue == role.RoleVM.Name)">Save</MudButton>
                        }
                        else
                        {
                            <MudText Typo="Typo.h6">
                                @role.RoleVM.Name
                            </MudText>
                            @if(role.RoleVM.Modifiable)
                            {
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="() => StartNameEdit(role)" />
                            }
                        }
                    </div>
                    <MudSelect Variant="Variant.Outlined" MultiSelection="true" T="TPermissions" SelectedValues="@role.PermissionsFlags"
                               SelectedValuesChanged="(v) => OnPermissionsChanged(role.RoleVM.Id, v)" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var permission in _allPermissionsFlags)
                        {
                            <MudSelectItem Value="@permission"></MudSelectItem>
                        }
                    </MudSelect>
                    <div class="d-flex justify-space-between">
                        <div class="d-flex gap-4 align-center">
                            <MudText Typo="Typo.body1">
                                Assigned to:
                            </MudText>
                            <!--TODO-->
                            <MudAvatarGroup Spacing="3" Max="3" MaxColor="Color.Primary">
                                <MudAvatar Color="Color.Primary">M</MudAvatar>
                                <MudAvatar Color="Color.Secondary">U</MudAvatar>
                                <MudAvatar Color="Color.Tertiary">D</MudAvatar>
                                <MudAvatar Color="Color.Primary">M</MudAvatar>
                                <MudAvatar Color="Color.Secondary">U</MudAvatar>
                                <MudAvatar Color="Color.Tertiary">D</MudAvatar>
                            </MudAvatarGroup>
                        </div>
                        <MudButton StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" Variant="Variant.Filled"
                                   Disabled="@(!role.RoleVM.Modifiable)" OnClick="() => DeleteRole(role.RoleVM.Id)">
                            Delete
                        </MudButton>
                    </div>
                </MudItem>
            }
        </MudGrid>
        
    </MudPaper>
}

<Dialog Title="Create a new role" Form="_createRoleForm" OnConfirm="CreateRole" >
    <MudTextField @bind-Value="@_createRoleForm.Name" Label="Name" Required="true" Variant="Variant.Filled" />
    <MudSelect Label="Permissions" Variant="Variant.Outlined" MultiSelection="true" T="TPermissions" @bind-SelectedValues="@_createRoleForm.PermissionsFlags" AnchorOrigin="Origin.BottomCenter">
        @foreach (var permission in _allPermissionsFlags)
        {
            <MudSelectItem Value="@permission"></MudSelectItem>
        }
    </MudSelect>
</Dialog>


@code {
    [Parameter]
    public required string ApiUrl { get; init; }

    [Parameter]
    public EventCallback RolesUpdated { get; set; }

    [Parameter]
    public required RolesVM<TPermissions>? RolesVM { get; set; }

    private readonly TPermissions[] _allPermissionsFlags = Enum.GetValues<TPermissions>().Where(x => Convert.ToInt32(x) != 0).ToArray();

    private class RoleData
    {
        public required RoleVM<TPermissions> RoleVM{ get; set; }
        public required IEnumerable<TPermissions> PermissionsFlags { get; set; }
        public required string NameEditValue { get; set; }
        public bool NameEditEnabled { get; set; } = false;
    }
    private List<RoleData> _rolesData = new();

    private class CreateRoleForm : DialogForm
    {
        public string Name { get; set; } = string.Empty;
        public IEnumerable<TPermissions> PermissionsFlags { get; set; } = Enumerable.Empty<TPermissions>();

        public override bool IsValid()
            => !string.IsNullOrWhiteSpace(Name);
    }
    private CreateRoleForm _createRoleForm = new();

    protected override async Task OnInitializedAsync()
    {
        if (RolesVM is null)
        {
            await UpdateRolesVM();
        }
        else
        {
            UpdateRolesData();
        }
    }

    private async Task UpdateRolesVM()
    {
        await RolesUpdated.InvokeAsync();
        UpdateRolesData();
    }

    private void UpdateRolesData()
    {
        if (RolesVM is null)
        {
            return;
        }

        _rolesData.Clear();
        foreach (var role in RolesVM.Roles.OrderBy(x => x.Modifiable).ThenBy(x => x.Name))
        {
            _rolesData.Add(new()
            {
                RoleVM = role,
                PermissionsFlags = _allPermissionsFlags.Where(x => role.Permissions.HasFlag(x)),
                NameEditValue = role.Name
            });
        }
    }

    private void StartNameEdit(RoleData role)
    {
        role.NameEditEnabled = true;
    }

    private void CancelNameEdit(RoleData role)
    {
        role.NameEditEnabled = false;
        role.NameEditValue = role.RoleVM.Name;
    }

    private async Task UpdateName(RoleData role)
    {
        var model = new UpdateRoleNameDto(role.NameEditValue);
        await _requestHandler.PostAsync(ApiUrl + $"/{role.RoleVM.Id}/update-name", model);

        CancelNameEdit(role);
        await UpdateRolesVM();
    }

    private async Task OnPermissionsChanged(Guid roleId, IEnumerable<TPermissions> permissions)
    {
        
    }

    private async Task CreateRole()
    {
        if (!_createRoleForm.IsValid())
        {
            return;
        }

        var permissions = CreatePermissionsFromList(_createRoleForm.PermissionsFlags);
        var model = new CreateRoleDto<TPermissions>(_createRoleForm.Name, permissions);

        await _requestHandler.PostAsync(ApiUrl, model);
        await UpdateRolesVM();
        _createRoleForm = new();
    }

    private async Task DeleteRole(Guid roleId)
    {
        await _requestHandler.PostAsync(ApiUrl + $"/{roleId}/delete");
        await UpdateRolesVM();
    }

    private static TPermissions CreatePermissionsFromList(IEnumerable<TPermissions> permissionsFlags)
    {
        var value = 0;
        foreach(var flag in permissionsFlags)
        {
            value += Convert.ToInt32(flag);
        }
        return (TPermissions)(object)value;
    }
}
