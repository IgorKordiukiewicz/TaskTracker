@using Humanizer;
@using Web.Client.Common;
@typeparam TPermissions where TPermissions: struct, Enum

<!--Defined locally to not affect MudBlazor's data grids in other components-->
<style>
    .mud-table-container {
        min-width: 100% !important;
    }

    .mud-table-cell.sticky-left {
        width: 400px !important;
    }
</style>

@if(RolesVM is not null && _roleColumns is not null)
{
    <div class="pa-4">
        <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Success" Class="mb-4" OnClick="@(() => _createRoleForm.Open())">Create</MudButton>
        <MudDataGrid Items="_permissionsRows" HorizontalScrollbar="true" Filterable="false" SortMode="@SortMode.None" Groupable="false" @ref="_dataGrid">
            <Columns>
                <TemplateColumn StickyLeft="true" Title="">
                    <CellTemplate>
                        <MudText>
                            @(context.Item.Permission.ToString().Humanize(LetterCasing.Title))
                        </MudText>
                    </CellTemplate>
                </TemplateColumn>
                @foreach (var roleColumn in _roleColumns)
                {
                    <TemplateColumn Title="@roleColumn.RoleVM.Name" HeaderStyle="min-width: 250px; ">
                        <HeaderTemplate>
                            <div class="d-flex gap-2 align-center justify-space-between">
                                <MudText>
                                    @roleColumn.RoleVM.Name
                                </MudText>
                                @if (roleColumn.RoleVM.Modifiable)
                                {
                                    <MudMenu Icon="@Icons.Material.Filled.ArrowDropDown" AnchorOrigin="Origin.BottomCenter">
                                        <MudMenuItem Icon="@Icons.Material.Filled.Edit" OnClick="@(() => StartNameEdit(roleColumn))">Edit name</MudMenuItem>
                                        <MudMenuItem Icon="@Icons.Material.Filled.Delete" IconColor="Color.Error" OnClick="@(() => DeleteRole(roleColumn.RoleVM.Id))">Delete</MudMenuItem>
                                    </MudMenu>
                                }
                            </div>
                        </HeaderTemplate>
                        <CellTemplate>
                            <MudCheckBox T="bool" Disabled="@(!roleColumn.RoleVM.Modifiable)" Checked="@roleColumn.PermissionsFlags[context.Item.Permission]"
                                         CheckedChanged="@(value => UpdatePermissions(roleColumn, context.Item.Permission, value))"></MudCheckBox>
                        </CellTemplate>
                    </TemplateColumn>
                }
            </Columns>
        </MudDataGrid>
    </div>
}

<Dialog Title="Create a new role" Form="_createRoleForm" OnConfirm="CreateRole" >
    <MudTextField @bind-Value="@_createRoleForm.Name" Label="Name" Required="true" Variant="Variant.Filled" />
    <MudSelect Label="Permissions" Variant="Variant.Filled" MultiSelection="true" T="TPermissions" @bind-SelectedValues="@_createRoleForm.PermissionsFlags" AnchorOrigin="Origin.BottomCenter">
        @foreach (var permission in _allPermissionsFlags)
        {
            <MudSelectItem Value="@permission">
                @(permission.ToString().Humanize(LetterCasing.Title))
            </MudSelectItem>
        }
    </MudSelect>
</Dialog>

<Dialog Title="Update role name" Form="_updateRoleNameForm" OnConfirm="@UpdateName" ConfirmButtonText="Save" >
    <MudTextField @bind-Value="@_updateRoleNameForm.Name" Label="Name" Required="true" Variant="Variant.Filled" />
</Dialog>

<ConfirmDeleteBox @ref="_confirmDeleteBox"></ConfirmDeleteBox>

@code {
    [Parameter]
    public EventCallback RolesUpdated { get; set; }

    [Parameter]
    public required Func<Guid, UpdateRoleNameDto, Task> UpdateNameFunc { get; set; }

    [Parameter]
    public required Func<Guid, UpdateRolePermissionsDto<TPermissions>, Task> UpdatePermissionsFunc { get; set; }

    [Parameter]
    public required Func<CreateRoleDto<TPermissions>, Task> CreateFunc { get; set; }

    [Parameter]
    public required Func<Guid, Task> DeleteFunc { get; set; }

    [Parameter]
    public required RolesVM<TPermissions>? RolesVM { get; set; }

    private ConfirmDeleteBox _confirmDeleteBox = null!;
    private MudDataGrid<PermissionRow>? _dataGrid;

    private readonly TPermissions[] _allPermissionsFlags = Enum.GetValues<TPermissions>().Where(x => Convert.ToInt32(x) != 0).ToArray();

    private class PermissionRow
    {
        public required TPermissions Permission { get; set; }
        public required Dictionary<Guid, bool> EnabledByRole { get; set; }
    }

    private List<PermissionRow> _permissionsRows = new();
    private Dictionary<Guid, RoleColumn>? _roleColumnById;
    private IReadOnlyList<RoleColumn>? _roleColumns;

    public class RoleColumn 
    {
        public required RoleVM<TPermissions> RoleVM { get; init; }
        public required Dictionary<TPermissions, bool> PermissionsFlags { get; init; }
    }

    private class CreateRoleForm : DialogForm
    {
        public string Name { get; set; } = string.Empty;
        public IEnumerable<TPermissions> PermissionsFlags { get; set; } = Enumerable.Empty<TPermissions>();

        public override bool IsValid()
            => !string.IsNullOrWhiteSpace(Name);
    }
    private CreateRoleForm _createRoleForm = new();

    private class UpdateRoleNameForm : DialogForm
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;

        public override bool IsValid()
            => !string.IsNullOrWhiteSpace(Name);
    }
    private UpdateRoleNameForm _updateRoleNameForm = new();

    protected override async Task OnInitializedAsync()
    {
        if (RolesVM is null)
        {
            await UpdateRolesVM();
        }
        else
        {
            UpdateRolesData();
        }
    }

    private async Task UpdateRolesVM()
    {
        await RolesUpdated.InvokeAsync();
        UpdateRolesData();
    }

    private void UpdateRolesData()
    {
        if (RolesVM is null)
        {
            return;
        }

        _roleColumns = RolesVM.Roles.Select(x => new RoleColumn()
            {
                RoleVM = x,
                PermissionsFlags = _allPermissionsFlags.ToDictionary(k => k, v => x.Permissions.HasFlag(v))
            })
            .OrderBy(x => x.RoleVM.Modifiable)
            .ThenBy(x => x.RoleVM.Name)
            .ToList();
        _roleColumnById = _roleColumns.ToDictionary(k => k.RoleVM.Id, v => v);

        _permissionsRows = _allPermissionsFlags
            .Select(x => new PermissionRow()
            {
                Permission = x,
                EnabledByRole = _roleColumnById.Values.ToDictionary(k => k.RoleVM.Id, v => v.RoleVM.Permissions.HasFlag(x))
            })
            .ToList();
    }

    private IEnumerable<TPermissions> GetPermissionsFlags(RoleVM<TPermissions> roleVM)
        => _allPermissionsFlags.Where(x => roleVM.Permissions.HasFlag(x));

    private void StartNameEdit(RoleColumn roleColumn)
    {
        _updateRoleNameForm.Open();
        _updateRoleNameForm.Id = roleColumn.RoleVM.Id;
        _updateRoleNameForm.Name = roleColumn.RoleVM.Name;
    }

    private async Task UpdatePermissions(RoleColumn roleColumn, TPermissions permission, bool value)
    {
        roleColumn.PermissionsFlags[permission] = value;
        var permissions = CreatePermissionsFromList(roleColumn.PermissionsFlags
            .Where(x => x.Value)
            .Select(x => x.Key)
            .ToList());

        var model = new UpdateRolePermissionsDto<TPermissions>(permissions);

        await UpdatePermissionsFunc(roleColumn.RoleVM.Id, model);
        await UpdateRolesVM();
    }

    private async Task UpdateName()
    {
        var model = new UpdateRoleNameDto(_updateRoleNameForm.Name);
        await UpdateNameFunc(_updateRoleNameForm.Id, model);

        _updateRoleNameForm.Close();
        await UpdateRolesVM();
    }

    private async Task CreateRole()
    {
        if (!_createRoleForm.IsValid())
        {
            return;
        }

        var permissions = CreatePermissionsFromList(_createRoleForm.PermissionsFlags);
        var model = new CreateRoleDto<TPermissions>(_createRoleForm.Name, permissions);

        await CreateFunc(model);
        await UpdateRolesVM();
        _createRoleForm = new();
    }

    private async Task DeleteRole(Guid roleId)
    {
        if(!await _confirmDeleteBox.Show("Are you sure you want to delete this role?"))
        {
            return;
        }

        await DeleteFunc(roleId);
        await UpdateRolesVM();

        if(_dataGrid is null)
        {
            return;
        }
        // Work-around to fix a bug where after deleting a role, the datagrid's columns would get duplicated or not deleted properly.
        StateHasChanged();
        var removedDuplicates = _dataGrid.RenderedColumns.DistinctBy(x => x.Title);
        var rolesNames = RolesVM!.Roles.Select(x => x.Name).ToHashSet();
        _dataGrid.RenderedColumns.RemoveAll(x => !removedDuplicates.Contains(x) || (!rolesNames.Contains(x.Title) && !string.IsNullOrEmpty(x.Title)));
    }

    private static TPermissions CreatePermissionsFromList(IEnumerable<TPermissions> permissionsFlags)
    {
        var value = 0;
        foreach(var flag in permissionsFlags)
        {
            value += Convert.ToInt32(flag);
        }
        return (TPermissions)(object)value;
    }

    private static string GetEditPermissionsIcon(RoleColumn role)
        => role.RoleVM.Modifiable ? Icons.Material.Filled.Edit : string.Empty;
}
