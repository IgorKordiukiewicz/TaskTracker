@using Web.Client.Common;
@typeparam TPermissions where TPermissions: struct, Enum

@inject RequestHandler _requestHandler

@if(_rolesVM is not null)
{
    <MudPaper Class="pa-4">
        <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" Class="mb-1" OnClick="() => _createRoleForm.Open()">Create</MudButton>
        @foreach (var role in _rolesData)
        {
            <div class="d-flex gap-2 align-end">
                <div style="width: 50%">
                    <MudTextField Variant="Variant.Outlined" Value="@role.RoleVM.Name" T="string" ReadOnly="@(!role.NameEditEnabled)" Adornment="Adornment.End"
                              AdornmentIcon="@GetEditButtonIcon(role)" OnAdornmentClick="() => ToggleEdit(role)" ValueChanged="(name) => OnNameChanged(role.RoleVM.Id, name)" />
                </div>
                <div style="width: 50%">
                    <MudSelect Label="Permissions" Variant="Variant.Outlined" MultiSelection="true" T="TPermissions" SelectedValues="@role.PermissionsFlags"
                               SelectedValuesChanged="(v) => OnPermissionsChanged(role.RoleVM.Id, v)" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var permission in _allPermissionsFlags)
                        {
                            <MudSelectItem Value="@permission"></MudSelectItem>
                        }
                    </MudSelect>
                </div>
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Variant="Variant.Filled" Style="height: 56px; width: 56px;" Disabled="@(!role.RoleVM.Modifiable)" />
            </div>
        }
    </MudPaper>
}

<Dialog Title="Create a new role" Form="_createRoleForm" OnConfirm="CreateRole">
    <MudTextField @bind-Value="@_createRoleForm.Name" Label="Name" Required="true" Variant="Variant.Filled" />
    <MudSelect Label="Permissions" Variant="Variant.Outlined" MultiSelection="true" T="TPermissions" @bind-SelectedValues="@_createRoleForm.PermissionsFlags" AnchorOrigin="Origin.BottomCenter">
        @foreach (var permission in _allPermissionsFlags)
        {
            <MudSelectItem Value="@permission"></MudSelectItem>
        }
    </MudSelect>
</Dialog>


@code {
    [Parameter]
    public required string ApiUrl{ get; init; }

    private readonly TPermissions[] _allPermissionsFlags = Enum.GetValues<TPermissions>().Where(x => Convert.ToInt32(x) != 0).ToArray();

    private RolesVM<TPermissions>? _rolesVM;

    private class RoleData
    {
        public required RoleVM<TPermissions> RoleVM{ get; set; }
        public required IEnumerable<TPermissions> PermissionsFlags { get; set; }
        public bool NameEditEnabled { get; set; } = false;
    }
    private List<RoleData> _rolesData = new();

    private class CreateRoleForm : DialogForm
    {
        public string Name { get; set; } = string.Empty;
        public IEnumerable<TPermissions> PermissionsFlags { get; set; } = Enumerable.Empty<TPermissions>();

        public override bool IsValid()
            => !string.IsNullOrWhiteSpace(Name);
    }
    private CreateRoleForm _createRoleForm = new();

    protected override async Task OnInitializedAsync()
    {
        await UpdateRolesVM();
    }

    private async Task UpdateRolesVM()
    {
        _rolesVM = await _requestHandler.GetAsync<RolesVM<TPermissions>>(ApiUrl);
        if(_rolesVM is null)
        {
            return;
        }

        _rolesData.Clear();
        foreach(var role in _rolesVM.Roles.OrderBy(x => x.Modifiable).ThenBy(x => x.Name))
        {
            _rolesData.Add(new()
            {
                RoleVM = role,
                PermissionsFlags = _allPermissionsFlags.Where(x => role.Permissions.HasFlag(x))
            });
        }
    }

    private void ToggleEdit(RoleData role)
    {
        role.NameEditEnabled = !role.NameEditEnabled;
    }

    private string GetEditButtonIcon(RoleData role)
        => role.RoleVM.Modifiable 
        ? (role.NameEditEnabled ? @Icons.Material.Filled.EditOff : @Icons.Material.Filled.Edit) 
        : string.Empty;

    private async Task OnNameChanged(Guid roleId, string newName)
    {

    }

    private async Task OnPermissionsChanged(Guid roleId, IEnumerable<TPermissions> permissions)
    {

    }

    private async Task CreateRole()
    {
        if (!_createRoleForm.IsValid())
        {
            return;
        }

        var permissions = CreatePermissionsFromList(_createRoleForm.PermissionsFlags);
        var model = new CreateRoleDto<TPermissions>(_createRoleForm.Name, permissions);

        await _requestHandler.PostAsync(ApiUrl, model);
        await UpdateRolesVM();
        _createRoleForm = new();
    }

    private static TPermissions CreatePermissionsFromList(IEnumerable<TPermissions> permissionsFlags)
    {
        var value = 0;
        foreach(var flag in permissionsFlags)
        {
            value += Convert.ToInt32(flag);
        }
        return (TPermissions)(object)value;
    }
}
