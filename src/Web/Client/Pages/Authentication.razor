@page "/authentication/{action}"

@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.Extensions.Configuration
@using System.Text.Json;
@using System.Text;
@using global::Shared.Dtos;

@inject NavigationManager _navigationManager
@inject IConfiguration _configuration
@inject AuthenticationStateProvider _authenticationStateProvider
@inject RequestHandler _requestHandler

<RemoteAuthenticatorView Action="@Action" OnLogInSucceeded="OnLogIn">
    <LogOut>
        @{
            var authority = (string)_configuration["Auth0:Authority"];
            var clientId = (string)_configuration["Auth0:ClientId"];

            _navigationManager.NavigateTo($"{authority}/v2/logout?client_id={clientId}");
        }
    </LogOut>
</RemoteAuthenticatorView>

@code {
    [Parameter]
    public required string Action { get; set; }

    private async Task OnLogIn(RemoteAuthenticationState _)
    {
        var state = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var userAuthid = state.User.Claims.First(x => x.Type == "sub").Value;
        var isRegistered = await _requestHandler.GetAsync<bool>($"users/{userAuthid}/is-registered");
        if(isRegistered)
        {
            return;
        }

        _navigationManager.NavigateTo("complete-registration", true);
    }
}
