@page "/authentication/{action}"

@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.Extensions.Configuration
@using System.Text.Json;
@using System.Text;
@using global::Shared.Dtos;

@inject NavigationManager _navigationManager
@inject IConfiguration _configuration
@inject AuthenticationStateProvider _authenticationStateProvider
@inject HttpClient _httpClient

<RemoteAuthenticatorView Action="@Action" OnLogInSucceeded="OnLogIn">
    <LogOut>
        @{
            var authority = (string)_configuration["Auth0:Authority"];
            var clientId = (string)_configuration["Auth0:ClientId"];

            _navigationManager.NavigateTo($"{authority}/v2/logout?client_id={clientId}");
        }
    </LogOut>
</RemoteAuthenticatorView>

@code {
    [Parameter]
    public required string Action { get; set; }

    private RequestHandler _requestHandler = null!; // TODO: Inject request handler?

    protected override async Task OnInitializedAsync()
    {
        _requestHandler = new(_httpClient);
    }

    private async Task OnLogIn(RemoteAuthenticationState _)
    {
        var state = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var userId = state.User.Claims.First(x => x.Type == "sub").Value;
        var isRegistered = await _requestHandler.GetAsync<bool>($"users/is-registered/{userId}");
        if(isRegistered)
        {
            return;
        }

        var userName = state.User.Identity?.Name ?? string.Empty;
        var model = new UserRegistrationDto(userId, userName);
        await _requestHandler.PostAsync("users/register", model);
    }
}
