@page "/project/{projectId:guid}/settings"
@layout ProjectLayout
@attribute [Authorize(Policy = Policy.ProjectManageProject)]

@inject ProjectsService _projectsService
@inject HierarchyNavigationService _hierarchyNavigationService
@inject NavigationManager _navManager

@if (_settingsVM is not null)
{
    <MudPaper Class="pa-6 d-flex flex-column gap-4">
        <div class="d-flex gap-2 align-end">
            <MudTextField Variant="Variant.Filled" @bind-Value="_nameEditValue" ReadOnly="@(!_nameEditEnabled)" Adornment="Adornment.End" Label="Name"
                AdornmentIcon="@(_nameEditEnabled ? string.Empty : @Icons.Material.Filled.Edit)" OnAdornmentClick="StartNameEdit" />
            @if (_nameEditEnabled)
            {
                <MudButton Variant="Variant.Filled" OnClick="CancelNameEdit" Style="height: 56px; width: 100px;">Cancel</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="UpdateName"  Style="height: 56px; width: 100px;" Disabled="@(_settingsVM.Name == _nameEditValue)">Save</MudButton>
            }
        </div>
        <MudDivider />
        <div>
            <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" OnClick="DeleteProject">Delete Project</MudButton>
        </div>
    </MudPaper>
}

<ConfirmDeleteBox @ref="_confirmDeleteBox"></ConfirmDeleteBox>

@code {
    [Parameter]
    public Guid ProjectId { get; init; }

    [CascadingParameter]
    public ProjectLayout Layout { get; set; } = null!;

    private bool _nameEditEnabled = false;
    private string _nameEditValue = string.Empty;

    private ProjectSettingsVM? _settingsVM;

    private ConfirmDeleteBox _confirmDeleteBox = null!;

    protected override async Task OnInitializedAsync()
    {
        await Layout.SetProjectId(ProjectId);

        await UpdateSettingsVM();
    }

    private async Task UpdateSettingsVM()
    {
        _settingsVM = await _projectsService.GetSettings(ProjectId);
        if(_settingsVM is not null)
        {
            _nameEditValue = _settingsVM!.Name;
        }
    }

    private void StartNameEdit()
    {
        _nameEditEnabled = true;
    }

    private void CancelNameEdit()
    {
        _nameEditEnabled = false;
        _nameEditValue = _settingsVM!.Name;
    }

    private async Task UpdateName()
    {
        var model = new UpdateProjectNameDto(_nameEditValue);
        _ = await _projectsService.UpdateName(ProjectId, model);

        CancelNameEdit();
        await UpdateSettingsVM();
        await Layout.SetProjectId(ProjectId); // Call it to update the breadcrumbs
    }

    private async Task DeleteProject()
    {
        if (!await _confirmDeleteBox.Show("Are you sure you want to delete this project?"))
        {
            return;
        }

        var result = await _projectsService.Delete(ProjectId);
        if(result)
        {
            var orgId = _hierarchyNavigationService.OrganizationId!;
            _navManager.NavigateTo($"org/{orgId}");
        }
    }
}
