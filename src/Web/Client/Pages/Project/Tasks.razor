@page "/project/{projectId:guid}/tasks/{displayTypeStr}"
@page "/project/{projectId:guid}/"

@layout ProjectLayout
@attribute [Authorize]

@inject TasksService TasksService
@inject ProjectsService ProjectsService
@inject UserDataService UserDataService

@if(_tasksVM is not null && _membersVM is not null)
{
    <div class="d-flex flex-column max-height">
        <MudPaper Class="mb-2" Style="width: 100%;">
            <MudGrid Class="d-flex align-end pa-3" Spacing="1">
                <MudItem lg="3" xs="12">
                    <MudTextField T="string" @bind-Value="_filters.Title" Label="Title" Variant="Variant.Filled" Class="flex-grow-1" FullWidth="true"></MudTextField>
                </MudItem>
                <MudItem lg="2" xs="12">
                    <MudSelect Label="Status" Variant="Variant.Filled" MultiSelection="true" SelectAll="true" SelectAllText="All" @bind-SelectedValues="_filters.Statuses"
                               ToStringFunc="@(x => x.Name)" FullWidth="true" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var status in _tasksVM.AllTaskStatuses)
                        {
                            <MudSelectItem Value="@status"></MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem lg="2" xs="12">
                    <MudSelect Label="Priority" Variant="Variant.Filled" MultiSelection="true" SelectAll="true" SelectAllText="All" @bind-SelectedValues="_filters.Priorities"
                               FullWidth="true" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var priority in Enum.GetValues<TaskPriority>())
                        {
                            <MudSelectItem Value="@priority"></MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem lg="2" xs="12">
                    <MudSelect Label="Assignee" Variant="Variant.Filled" MultiSelection="true" SelectAll="true" SelectAllText="All" @bind-SelectedValues="_filters.Assignees"
                               ToStringFunc="@(x => x.Name)" FullWidth="true" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var member in GetAssigneesForFilters())
                        {
                            <MudSelectItem Value="@member"></MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem lg="3" xs="12" Class="d-flex gap-2 align-center">
                    <MudButton Variant="Variant.Filled" Color="Color.Info" StartIcon="@Icons.Material.Filled.Clear" Style="height: 55px;" FullWidth="true" OnClick="@(() => { _filters = new(); FilterTasks(); })">
                            Clear
                        </MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Search" Style="height: 55px;" FullWidth="true" OnClick="@FilterTasks">
                        Search
                    </MudButton>
                    @if (_createTasksPermissions)
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => _createTaskForm.Open())" Style="height: 55px;" StartIcon="@Icons.Material.Filled.AddTask" FullWidth="true">
                            Create
                        </MudButton>
                    }
                </MudItem>
            </MudGrid>
        </MudPaper>
        <TaskDetailsPopup @ref="_taskDetailsPopup" ProjectId="ProjectId" TaskUpdated="UpdateTasksVM" MembersVM="_membersVM"
            ModifyTasksPermissions="_modifyTasksPermissions" TransitionTasksPermissions="_transitionTasksPermissions" 
            AddCommentsPermissions="_addCommentsPermissions" AssignTasksPermissions="_assignTasksPermissions"
            LogTimePermissions="_logTimePermissions" EstimateTasksPermissions="_estimateTasksPermissions"></TaskDetailsPopup>
        @if(GetDisplayType() == DisplayType.Table)
        {
            <MudTable Items="@_tasks" Hover="true" RowClass="clickable" OnRowClick="(TableRowClickEventArgs<TaskVM> args) => OpenTaskDetailsPopup(args.Item.Id)" Bordered="true" SortLabel="SortBy">
                <ColGroup>
                    <col style="width: 100px;" />
                    <col />
                    <col style="width: 200px;" />
                    <col style="width: 200px;" />
                    <col style="width: 200px;" />
                </ColGroup>
                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<TaskVM, object>(x => x.ShortId)">ID</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<TaskVM, object>(x => x.Title)">Title</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<TaskVM, object>(x => x.Status.Name)">Status</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<TaskVM, object>(x => x.Priority)">Priority</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<TaskVM, object>(x => x.AssigneeId ?? Guid.Empty)">Assignee</MudTableSortLabel>
                    </MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="ID">@context.ShortId</MudTd>
                    <MudTd DataLabel="Title">@context.Title</MudTd>
                    <MudTd DataLabel="Status">@context.Status.Name</MudTd>
                    <MudTd DataLabel="Priority">
                        <div class="d-flex align-center gap-2">
                            <PriorityAvatar Priority="@context.Priority" />
                            <text>
                                @context.Priority
                            </text>
                        </div>
                    </MudTd>
                    <MudTd DataLabel="Assignee">
                        @{
                            var currentAssignee = _membersVM.GetCurrentAssigneeVM(context.AssigneeId);
                        }
                        @if(currentAssignee is not null)
                        {
                            <div class="d-flex align-center gap-2">
                                <UserAvatar Name="@currentAssignee.Name" UserId="@currentAssignee.UserId" Size="Size.Small"></UserAvatar>
                                <text>
                                    @currentAssignee.Name
                                </text>
                            </div>
                        }
                        else
                        {
                            <text>
                                -
                            </text>
                        }
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager HorizontalAlignment="HorizontalAlignment.End" />
                </PagerContent>
            </MudTable>
        }
        else
        {
        <div class="status-board-container">
            <MudDropContainer T="TaskVM" Items="@_tasks" ItemsSelector="@((items, dropzone) => items.Status.Name == dropzone)" ApplyDropClassesOnDragStarted="true" Class="status-board gap-6"
                              ItemDropped="TaskDropped" CanDropClass="mud-border-success" NoDropClass="mud-border-error">
                <ChildContent>
                    @foreach (var status in _tasksVM.AllTaskStatuses.OrderBy(x => x.DisplayOrder).Select(x => x.Name))
                    {
                        <div style="margin-bottom: 40px;">
                                <MudDropZone Identifier="@status" T="TaskVM" Class="rounded mud-background-gray pa-6 mt-4 border-2 border-solid mud-border-lines-default" Style="overflow-y: auto; height: 100%;"
                                             CanDrop="@((item) => _transitionTasksPermissions && item.PossibleNextStatuses.Any(x => x.Name == status))">
                                    <MudText Typo="Typo.h6" Style="width: 350px;" Align="Align.Center">
                                        @status
                                    </MudText>
                                </MudDropZone>
                        </div>
                        
                    }
                </ChildContent>
                <ItemRenderer>
                    <MudPaper Class="pa-4 my-4" Style="width: 350px;">
                        <div class="d-flex align-center justify-space-between">
                            @context.Title
                            <div class="d-flex align-center gap-2">
                                @if(context.AssigneeId is not null)
                                {
                                    var currentAssignee = _membersVM.GetCurrentAssigneeVM(context.AssigneeId);
                                    <UserAvatar Name="@currentAssignee!.Name" UserId="@currentAssignee.UserId" Size="Size.Small" Tooltip="true"></UserAvatar>
                                }
                                <PriorityAvatar Priority="@context.Priority" Tooltip="true" />
                                <MudIconButton Icon="@Icons.Material.Filled.MoreHoriz" OnClick="@(() => OpenTaskDetailsPopup(context.Id))" />
                            </div>
                        </div>
                    </MudPaper>
                </ItemRenderer>
            </MudDropContainer>
        </div>

        }
    </div>
}

<Dialog Title="Create a new task" Form="_createTaskForm" OnConfirm="CreateTask">
    <MudTextField @bind-Value="@_createTaskForm.Title" Label="Title" Required="true" Variant="Variant.Filled" />
    <MudTextField @bind-Value="@_createTaskForm.Description" Label="Description" Variant="Variant.Filled" />
    <MudSelect @bind-Value="@_createTaskForm.Priority" Label="Priority" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter">
        @foreach(var priority in Enum.GetValues<TaskPriority>())
        {
            <MudSelectItem Value="@priority"></MudSelectItem>
        }
    </MudSelect>
    @if (_membersVM is not null)
    {
        <MudSelect T="ProjectMemberVM" Value="@_membersVM.GetCurrentAssigneeVM(_createTaskForm.Assignee?.UserId)" ValueChanged="e => { _createTaskForm.Assignee = e; }"
                   ToStringFunc="@(x => x.Name)" Label="Assignee" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter">
            @foreach (var member in _membersVM.GetPossibleAssignees(_createTaskForm.Assignee?.UserId))
            {
                <MudSelectItem Value="@member"></MudSelectItem>
            }
        </MudSelect>
    }
</Dialog>

@code {
    [Parameter]
    public Guid ProjectId { get; init; }

    [Parameter]
    public string? DisplayTypeStr { get; set; }

    [CascadingParameter]
    public ProjectLayout Layout { get; set; } = null!;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; } = null!;

    private bool _createTasksPermissions;
    private bool _modifyTasksPermissions;
    private bool _transitionTasksPermissions;
    private bool _assignTasksPermissions;
    private bool _addCommentsPermissions;
    private bool _logTimePermissions;
    private bool _estimateTasksPermissions;

    private TasksVM? _tasksVM;
    private Dictionary<string, Guid>? _taskStatusIdByName = new();
    private IEnumerable<TaskVM>? _tasks;

    private ProjectMembersVM? _membersVM;

    private TaskDetailsPopup? _taskDetailsPopup;

    private enum DisplayType
    {
        Table,
        Board
    }

    private class CreateTaskForm : DialogForm
    {
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public TaskPriority Priority { get; set; } = TaskPriority.Normal;
        public ProjectMemberVM? Assignee { get; set; }

        public override bool IsValid() => !string.IsNullOrWhiteSpace(Title);
    }
    private CreateTaskForm _createTaskForm = new();

    private class Filters
    {
        public string Title { get; set; } = string.Empty;
        public IEnumerable<TaskStatusDetailedVM> Statuses { get; set; } = new List<TaskStatusDetailedVM>();
        public IEnumerable<ProjectMemberVM> Assignees { get; set; } = new List<ProjectMemberVM>();
        public IEnumerable<TaskPriority> Priorities { get; set; } = new List<TaskPriority>();
    }
    private Filters _filters = new();

    protected override async Task OnInitializedAsync()
    {
        await Layout.SetProjectId(ProjectId);

        // TODO: Refactor
        _createTasksPermissions = UserDataService.HasProjectPermissions(ProjectId, ProjectPermissions.CreateTasks);
        _modifyTasksPermissions = UserDataService.HasProjectPermissions(ProjectId, ProjectPermissions.ModifyTasks);
        _transitionTasksPermissions = UserDataService.HasProjectPermissions(ProjectId, ProjectPermissions.TransitionTasks);
        _assignTasksPermissions = UserDataService.HasProjectPermissions(ProjectId, ProjectPermissions.AssignTasks);
        _addCommentsPermissions = UserDataService.HasProjectPermissions(ProjectId, ProjectPermissions.AddComments);
        _logTimePermissions = UserDataService.HasProjectPermissions(ProjectId, ProjectPermissions.LogTimeOnTasks);
        _estimateTasksPermissions = UserDataService.HasProjectPermissions(ProjectId, ProjectPermissions.EstimateTasks);

        await UpdateTasksVM();
        _membersVM = await ProjectsService.GetMembers(ProjectId);
    }

    private DisplayType GetDisplayType() => (DisplayTypeStr?.ToLower() ?? string.Empty) switch
    {
        "table" => DisplayType.Table,
        "board" => DisplayType.Board,
        _ => DisplayType.Table
    };

    private void FilterTasks()
    {
        var titleLower = _filters.Title.ToLower();
        var statuses = _filters.Statuses.Select(x => x.Id).ToHashSet();
        var assignees = _filters.Assignees.Select(x => x.UserId).ToHashSet();
        var priorities = _filters.Priorities.ToHashSet();

        _tasks = _tasksVM!.Tasks.Where(x => 
            (string.IsNullOrWhiteSpace(titleLower) || x.Title.ToLower().Contains(titleLower))
            && (!statuses.Any() || statuses.Contains(x.Status.Id))
            && (!assignees.Any() || assignees.Contains(x.AssigneeId.GetValueOrDefault()))
            && (!priorities.Any() || priorities.Contains(x.Priority)))
            .ToList();
    }

    private async Task OpenTaskDetailsPopup(Guid taskId)
    {
        if(_taskDetailsPopup is null)
        {
            return;
        }

        var taskVM = _tasksVM!.Tasks.Single(x => x.Id == taskId);
        await _taskDetailsPopup.Open(taskVM);
    }

    private async Task UpdateTasksVM()
    {
        _tasksVM = await TasksService.GetList(ProjectId); // TODO: Optimize it, don't fetch all tasks again
        if (_tasksVM is null)
        {
            return;
        }
        
        if(_taskDetailsPopup?.Visible ?? false)
        {
            _taskDetailsPopup!.Update(_tasksVM!.Tasks.Single(x => x.Id == _taskDetailsPopup.CurrentTaskId));
        }

        _taskStatusIdByName = _tasksVM?.AllTaskStatuses
            .ToDictionary(x => x.Name, x => x.Id);
        FilterTasks();
    }

    private async Task TaskDropped(MudItemDropInfo<TaskVM> dropItem)
    {
        if(dropItem.Item is null || _taskStatusIdByName is null || _taskDetailsPopup is null)
        {
            return;
        }

        await _taskDetailsPopup.UpdateTaskStatus(dropItem.Item.Id, _taskStatusIdByName[dropItem.DropzoneIdentifier]);
    }

    private async Task CreateTask()
    {
        if(!_createTaskForm.IsValid())
        {
            return;
        }

        var model = new CreateTaskDto()
        {
            Title =_createTaskForm.Title,
            Description = _createTaskForm.Description,
            Priority = _createTaskForm.Priority,
            AssigneeMemberId = _createTaskForm.Assignee?.Id
        };
        await TasksService.Create(ProjectId, model);
        await UpdateTasksVM();
        _createTaskForm = new();
    }

    private IEnumerable<ProjectMemberVM> GetAssigneesForFilters()
    {
        var currentUserMember = _membersVM!.Members.First(x => x.UserId == UserDataService.CurrentUserVM!.Id);
        return new ProjectMemberVM[] { 
            new(Guid.Empty, Guid.Empty, "-", Guid.Empty), 
            new(currentUserMember.Id, currentUserMember.UserId, "@me", currentUserMember.RoleId) }
            .Concat(_membersVM.Members);
    }
}
