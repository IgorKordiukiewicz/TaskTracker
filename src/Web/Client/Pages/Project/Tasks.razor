@page "/project/{projectId:guid}/tasks"
@page "/project/{projectId:guid}/"
@using Web.Client.Common;
@layout ProjectLayout
@attribute [Authorize]

@inject HttpClient _httpClient
@inject IDialogService _dialogService

@if(_tasksVM is not null) // TODO: Display DisplayType selector in the navbar: Tasks/Board and Tasks/Table
{
    <div class="d-flex gap-2 align-center mb-4">
        <MudSelect @bind-Value="_displayType" Label="Display Type" Variant="Variant.Outlined">
            <MudSelectItem Value="DisplayType.Table">Table</MudSelectItem>
            <MudSelectItem Value="DisplayType.Board">Board</MudSelectItem>
        </MudSelect>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => _createTaskForm.Open()" Style="height: 50%;">
            Create
        </MudButton>
    </div>
    <MudOverlay Visible="@(_openedTaskId is not null)" DarkBackground="true">
        <MudPaper Class="pa-6" Style="width: 640px;">
            @{
                var currentTaskVM = _tasksVM.Tasks.Single(x => x.Id == _openedTaskId);
            }
            <div class="d-flex justify-space-between align-center">
                <MudText Typo="Typo.h4">
                    @($"#{currentTaskVM.ShortId} {@currentTaskVM.Title}")
                </MudText>
                <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="CloseTaskDetailsPopup"/>
            </div>
            <MudDivider />
            <MudText Typo="Typo.h6">
                Description
            </MudText>
            <MudField ReadOnly="true" Variant="Variant.Filled">
                @currentTaskVM.Description
            </MudField>
            <MudText Typo="Typo.h6">
                Comments
            </MudText>
            <div class="d-flex gap-2">
                <MudTextField @bind-Value="@_newCommentText" Variant="Variant.Filled" Label="Add new comment"></MudTextField>
                <MudIconButton Icon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" Style="width: 60px;" />
            </div>
        </MudPaper>
    </MudOverlay>
    if(_displayType == DisplayType.Table)
    {
        <MudTable Items="@_tasksVM.Tasks" Hover="true" RowClass="clickable" OnRowClick="(TableRowClickEventArgs<TaskVM> args) => OpenTaskDetailsPopup(args.Item.Id)">
            <HeaderContent>
                <MudTh>ID</MudTh>
                <MudTh>Title</MudTh>
                <MudTh>Description</MudTh>
                <MudTh>Status</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="ID">@context.ShortId</MudTd>
                <MudTd DataLabel="Title">@context.Title</MudTd>
                <MudTd DataLabel="Description">@context.Description</MudTd>
                <MudTd DataLabel="Status">
                    <MudSelect T="TaskStatusVM" Value="@context.Status" ValueChanged="e => UpdateTaskStatus(context.Id, e.Id)" ToStringFunc="@(x => x.Name)" Margin="Margin.Dense" Variant="Variant.Outlined">
                        @foreach (var status in context.PossibleNextStatuses)
                        {
                            <MudSelectItem Value="@status"></MudSelectItem>
                        }
                    </MudSelect>
                </MudTd>
            </RowTemplate>
        </MudTable>
    }
    else
    {
        <MudDropContainer T="TaskVM" Items="@_tasksVM.Tasks" ItemsSelector="@((items, dropzone) => items.Status.Name == dropzone)" Class="d-flex flex-wrap flex-grow-1" ApplyDropClassesOnDragStarted="true"
            ItemDropped="TaskDropped" CanDropClass="mud-border-success" NoDropClass="mud-border-error">
            <ChildContent>
                @foreach(var status in _tasksVM.AllTaskStatuses.OrderBy(x => x.DisplayOrder).Select(x => x.Name))
                {
                    <MudDropZone Identifier="@status" T="TaskVM" Class="rounded mud-background-gray pa-6 ma-8 flex-grow-1 border-2 border-solid mud-border-lines-default" 
                    CanDrop="@((item) => item.PossibleNextStatuses.Any(x => x.Name == status))">
                        <MudText Typo="Typo.h6">
                            @status
                        </MudText>
                    </MudDropZone>
                }
            </ChildContent>
            <ItemRenderer>
                <MudPaper Class="pa-4 my-4">
                    @context.Title
                </MudPaper>
            </ItemRenderer>
        </MudDropContainer>
    }
}

<MudDialog @bind-IsVisible="_createTaskForm.Visible">
    <TitleContent>
        <MudText>
            Create a new task
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="@_createTaskForm.Title" Label="Title" Required="true" />
        <MudTextField @bind-Value="@_createTaskForm.Description" Label="Description" Required="true" />
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="() => _createTaskForm.Close()">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_createTaskForm.IsValid())" OnClick="CreateTask">Create</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter]
    public Guid ProjectId { get; init; }

    [CascadingParameter]
    public ProjectLayout Layout { get; set; } = null!;

    private RequestHandler _requestHandler = null!;

    private TasksVM? _tasksVM;
    private Dictionary<string, Guid>? _taskStatusIdByName = new();

    private Guid? _openedTaskId = null;
    private string _newCommentText = string.Empty;

    private enum DisplayType
    {
        Table,
        Board
    }
    private DisplayType _displayType = DisplayType.Table;

    private class CreateTaskForm : DialogForm
    {
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;

        public override bool IsValid() => !string.IsNullOrWhiteSpace(Title) && !string.IsNullOrWhiteSpace(Description);
    }
    private CreateTaskForm _createTaskForm = new();

    protected override async Task OnInitializedAsync()
    {
        Layout.ProjectId = ProjectId;
        _requestHandler = new(_httpClient, _dialogService);

        await UpdateTasksVM();
    }

    private async Task UpdateTasksVM()
    {
        _tasksVM = await _requestHandler.GetAsync<TasksVM>("tasks", new[] { ("ProjectId", ProjectId.ToString() )});
        _taskStatusIdByName = _tasksVM?.AllTaskStatuses
            .ToDictionary(x => x.Name, x => x.Id);
    }

    private async Task UpdateTaskStatus(Guid taskId, Guid newStatusId)
    {
        await _requestHandler.PostAsync($"tasks/{taskId}/update-status/{newStatusId}", headers: new[] { ("ProjectId", ProjectId.ToString()) });
        await UpdateTasksVM(); // TODO: Optimize it, don't fetch all tasks again
    }

    private async Task TaskDropped(MudItemDropInfo<TaskVM> dropItem)
    {
        if(dropItem.Item is null || _taskStatusIdByName is null)
        {
            return;
        }

        await UpdateTaskStatus(dropItem.Item.Id, _taskStatusIdByName[dropItem.DropzoneIdentifier]);
    }

    private async Task CreateTask()
    {
        if(!_createTaskForm.IsValid())
        {
            return;
        }

        var model = new CreateTaskDto()
        {
            Title = _createTaskForm.Title,
            Description = _createTaskForm.Description
        };
        await _requestHandler.PostAsync("tasks", model, new[] { ("ProjectId", ProjectId.ToString()) });
        await UpdateTasksVM();
        _createTaskForm = new();
    }

    private async Task OpenTaskDetailsPopup(Guid taskId)
    {
        _openedTaskId = taskId;
        // TODO: Load comments?
    }

    private void CloseTaskDetailsPopup()
    {
        _openedTaskId = null;
        _newCommentText = string.Empty;
    }
}
