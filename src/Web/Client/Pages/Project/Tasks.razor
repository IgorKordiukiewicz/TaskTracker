@page "/project/{projectId:guid}/tasks"
@page "/project/{projectId:guid}/"
@using Web.Client.Common;
@layout ProjectLayout
@attribute [Authorize]

@inject HttpClient _httpClient
@inject IDialogService _dialogService

@if(_tasksVM is not null) // TODO: Display DisplayType selector in the navbar: Tasks/Board and Tasks/Table
{
    <div class="d-flex flex-column max-height">
        <div class="d-flex gap-2 align-center mb-4">
            <MudSelect @bind-Value="_displayType" Label="Display Type" Variant="Variant.Outlined">
                <MudSelectItem Value="DisplayType.Table">Table</MudSelectItem>
                <MudSelectItem Value="DisplayType.Board">Board</MudSelectItem>
            </MudSelect>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => _createTaskForm.Open()" Style="height: 50%;">
                Create
            </MudButton>
        </div>
        <MudOverlay Visible="@(_openedTaskId is not null)" DarkBackground="true">
            <MudPaper Class="pa-6" Style="width: 640px;">
                @{
                    var currentTaskVM = _tasksVM.Tasks.Single(x => x.Id == _openedTaskId);
                }
                <div class="d-flex justify-space-between align-center mb-4">
                    <MudText Typo="Typo.h4">
                        @($"#{currentTaskVM.ShortId} {@currentTaskVM.Title}")
                    </MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="CloseTaskDetailsPopup" />
                </div>
                <MudGrid>
                    <MudDivider />
                    <MudItem md="6">
                        <MudSelect T="TaskStatusVM" Value="@currentTaskVM.Status" ValueChanged="e => UpdateTaskStatus(currentTaskVM.Id, e.Id)"
                                   ToStringFunc="@(x => x.Name)" Label="Status" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter">
                            @foreach (var status in currentTaskVM.PossibleNextStatuses)
                            {
                                <MudSelectItem Value="@status"></MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem md="6">
                        @if (_membersVM is not null)
                        {
                            <MudSelect T="ProjectMemberVM" Value="@GetCurrentAssigneeVM(currentTaskVM.AssigneeId)" ValueChanged="e => UpdateTaskAssignee(currentTaskVM.Id, e.Id)"
                                       ToStringFunc="@(x => x.Name)" Label="Assignee" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter">
                                @foreach (var member in GetPossibleAssignees(currentTaskVM.AssigneeId))
                                {
                                    <MudSelectItem Value="@member"></MudSelectItem>
                                }
                            </MudSelect>
                        }
                    </MudItem>
                    <MudDivider />
                    <MudItem xs="12">
                        <div class="d-flex justify-space-between align-center">
                            <MudText Typo="Typo.h6">
                                Description
                            </MudText>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" />
                        </div>
                        <MudText Typo="Typo.body1">
                            @currentTaskVM.Description
                        </MudText>
                    </MudItem>
                    <MudDivider />
                    <MudItem xs="12">
                        <MudText Typo="Typo.h6">
                            Comments
                        </MudText>
                        @if (_addCommentForm.Visible)
                        {
                            <MudTextField @bind-Value="_addCommentForm.Content" Variant="Variant.Filled" Label="New comment" Class="mb-1"></MudTextField>
                            <div class="d-flex justify-end gap-2">
                                <MudButton Variant="Variant.Outlined" OnClick="() => _addCommentForm.Close()">
                                    Cancel
                                </MudButton>
                                <MudButton Variant="Variant.Outlined" Color="Color.Primary" Disabled="@(!_addCommentForm.IsValid())" OnClick="AddNewComment">
                                    Add
                                </MudButton>
                            </div>
                        }
                        else
                        {
                            <MudButton Variant="Variant.Outlined" FullWidth="true" Class="mb-4 mt-1" OnClick="() => _addCommentForm.Open()">
                                Add Comment
                            </MudButton>
                        }
                        @if (_commentsVM is not null)
                        {
                            <div class="d-flex flex-column gap-4">
                                @foreach (var comment in _commentsVM.Comments)
                                {
                                    <div>
                                        <div class="d-flex mb-1 align-center justify-space-between">
                                            <div class="d-flex align-center gap-2">
                                                <MudAvatar Color="Color.Primary">@GetInitials(comment.AuthorName)</MudAvatar> <!-- TODO: Initials -->
                                                <MudText Style="font-weight: bold;">@comment.AuthorName</MudText>
                                            </div>
                                            <MudText Typo="Typo.caption">@comment.CreatedAt.GetHumanReadableTimeDifference(DateTime.Now)</MudText>
                                        </div>
                                        <div class="pa-2 comment-text">
                                            <MudText>
                                                @comment.Content
                                            </MudText>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudOverlay>
        @if(_displayType == DisplayType.Table)
        {
        <MudTable Items="@_tasksVM.Tasks" Hover="true" RowClass="clickable" OnRowClick="(TableRowClickEventArgs<TaskVM> args) => OpenTaskDetailsPopup(args.Item.Id)">
            <HeaderContent>
                <MudTh>ID</MudTh>
                <MudTh>Title</MudTh>
                <MudTh>Description</MudTh>
                <MudTh>Status</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="ID">@context.ShortId</MudTd>
                <MudTd DataLabel="Title">@context.Title</MudTd>
                <MudTd DataLabel="Description">@context.Description</MudTd>
                <MudTd DataLabel="Status">@context.Status.Name</MudTd>
            </RowTemplate>
        </MudTable>
        }
        else
        {
        <div class="status-board-container">
            <MudDropContainer T="TaskVM" Items="@_tasksVM.Tasks" ItemsSelector="@((items, dropzone) => items.Status.Name == dropzone)" ApplyDropClassesOnDragStarted="true" Class="status-board"
                              ItemDropped="TaskDropped" CanDropClass="mud-border-success" NoDropClass="mud-border-error">
                <ChildContent>
                    @foreach (var status in _tasksVM.AllTaskStatuses.OrderBy(x => x.DisplayOrder).Select(x => x.Name))
                    {
                        <MudDropZone Identifier="@status" T="TaskVM" Class="rounded mud-background-gray pa-6 ma-8 border-2 border-solid mud-border-lines-default"
                                     CanDrop="@((item) => item.PossibleNextStatuses.Any(x => x.Name == status))">
                            <MudText Typo="Typo.h6" Style="width: 250px;" Align="Align.Center">
                                @status
                            </MudText>
                        </MudDropZone>
                    }
                </ChildContent>
                <ItemRenderer>
                    <MudPaper Class="pa-4 my-4">
                        <div class="d-flex align-center justify-space-between">
                            @context.Title
                            <MudIconButton Icon="@Icons.Material.Filled.MoreHoriz" OnClick="() => OpenTaskDetailsPopup(context.Id)" />
                        </div>
                    </MudPaper>
                </ItemRenderer>
            </MudDropContainer>
        </div>

        }
    </div>
}

<MudDialog @bind-IsVisible="_createTaskForm.Visible" Style="width: 320px;" Options="@(new DialogOptions { NoHeader = true })">
    <DialogContent>
        <MudText Typo="Typo.h6" Align="Align.Center" Class="mb-2">Create a new task</MudText>
        <MudTextField @bind-Value="@_createTaskForm.Title" Label="Title" Required="true" Variant="Variant.Filled" />
        <MudTextField @bind-Value="@_createTaskForm.Description" Label="Description" Variant="Variant.Filled" />
        @if (_membersVM is not null)
        {
            <MudSelect T="ProjectMemberVM" Value="@GetCurrentAssigneeVM(_createTaskForm.Assignee?.UserId)" ValueChanged="e => { _createTaskForm.Assignee = e; }"
                       ToStringFunc="@(x => x.Name)" Label="Assignee" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter">
                @foreach (var member in GetPossibleAssignees(_createTaskForm.Assignee?.UserId))
                {
                    <MudSelectItem Value="@member"></MudSelectItem>
                }
            </MudSelect>
        }
        <div class="d-flex mt-3 gap-2">
            <MudButton Variant="Variant.Outlined" OnClick="() => _createTaskForm.Close()" FullWidth="true">Cancel</MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" Disabled="@(!_createTaskForm.IsValid())" OnClick="CreateTask" FullWidth="true">Create</MudButton>
        </div>
    </DialogContent>
</MudDialog>

@code {
    [Parameter]
    public Guid ProjectId { get; init; }

    [CascadingParameter]
    public ProjectLayout Layout { get; set; } = null!;

    private RequestHandler _requestHandler = null!;

    private TasksVM? _tasksVM;
    private Dictionary<string, Guid>? _taskStatusIdByName = new();

    private ProjectMembersVM? _membersVM;
    private Dictionary<Guid, string> _memberNameById = new();

    private Guid? _openedTaskId = null;
    private TaskCommentsVM? _commentsVM = null;
    private class AddCommentForm : DialogForm
    {
        public string Content { get; set; } = string.Empty;

        public override bool IsValid() => !string.IsNullOrWhiteSpace(Content);
    }
    private AddCommentForm _addCommentForm = new();

    private enum DisplayType
    {
        Table,
        Board
    }
    private DisplayType _displayType = DisplayType.Table;

    private class CreateTaskForm : DialogForm
    {
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public ProjectMemberVM? Assignee { get; set; } = null;

        public override bool IsValid() => !string.IsNullOrWhiteSpace(Title);
    }
    private CreateTaskForm _createTaskForm = new();

    protected override async Task OnInitializedAsync()
    {
        Layout.ProjectId = ProjectId;
        _requestHandler = new(_httpClient, _dialogService);

        await UpdateTasksVM();
        _membersVM = await _requestHandler.GetAsync<ProjectMembersVM>($"projects/{ProjectId}/members");
        if(_membersVM is not null)
        {
            _memberNameById = _membersVM.Members.ToDictionary(k => k.Id, v => v.Name);
        }
    }

    private async Task UpdateTasksVM()
    {
        _tasksVM = await _requestHandler.GetAsync<TasksVM>("tasks", new[] { ("ProjectId", ProjectId.ToString() )});
        _taskStatusIdByName = _tasksVM?.AllTaskStatuses
            .ToDictionary(x => x.Name, x => x.Id);
    }

    private async Task UpdateTaskStatus(Guid taskId, Guid newStatusId)
    {
        await _requestHandler.PostAsync($"tasks/{taskId}/update-status/{newStatusId}", headers: new[] { ("ProjectId", ProjectId.ToString()) });
        await UpdateTasksVM(); // TODO: Optimize it, don't fetch all tasks again
    }

    private async Task UpdateTaskAssignee(Guid taskId, Guid memberId)
    {
        var model = new UpdateTaskAssigneeDto(memberId != Guid.Empty ? memberId : null);
        await _requestHandler.PostAsync($"tasks/{taskId}/update-assignee", model, headers: new[] { ("ProjectId", ProjectId.ToString()) });
        await UpdateTasksVM();
    }

    private async Task TaskDropped(MudItemDropInfo<TaskVM> dropItem)
    {
        if(dropItem.Item is null || _taskStatusIdByName is null)
        {
            return;
        }

        await UpdateTaskStatus(dropItem.Item.Id, _taskStatusIdByName[dropItem.DropzoneIdentifier]);
    }

    private async Task CreateTask()
    {
        if(!_createTaskForm.IsValid())
        {
            return;
        }

        var model = new CreateTaskDto()
        {
            Title = _createTaskForm.Title,
            Description = _createTaskForm.Description,
            AssigneeMemberId = _createTaskForm.Assignee?.Id
        };
        await _requestHandler.PostAsync("tasks", model, new[] { ("ProjectId", ProjectId.ToString()) });
        await UpdateTasksVM();
        _createTaskForm = new();
    }

    private async Task OpenTaskDetailsPopup(Guid taskId)
    {
        _openedTaskId = taskId;
        _addCommentForm = new();
        await UpdateCommentsVM();
    }

    private void CloseTaskDetailsPopup()
    {
        _openedTaskId = null;
    }

    private async Task AddNewComment()
    {
        if (!_addCommentForm.IsValid())
        {
            return;
        }

        var model = new AddTaskCommentDto(_addCommentForm.Content);
        await _requestHandler.PostAsync($"tasks/{_openedTaskId}/comments", model, new[] { ("ProjectId", ProjectId.ToString()) });

        await UpdateCommentsVM();
        _addCommentForm = new();
    }

    private async Task UpdateCommentsVM()
    {
        _commentsVM = await _requestHandler.GetAsync<TaskCommentsVM>($"tasks/{_openedTaskId}/comments", new[] { ("ProjectId", ProjectId.ToString()) });
    }

    private ProjectMemberVM? GetCurrentAssigneeVM(Guid? assigneeId)
    {
        return _membersVM!.Members.FirstOrDefault(x => x.UserId == assigneeId) ?? null;
    }

    private IEnumerable<ProjectMemberVM> GetPossibleAssignees(Guid? assigneeId)
    {
        if (assigneeId is not null && assigneeId != Guid.Empty)
        {
            return _membersVM!.Members.Where(x => x.UserId != assigneeId.Value).Append(new(Guid.Empty, Guid.Empty, "-")).Reverse();
        }
        else
        {
            return _membersVM!.Members;
        }
    }

    private string GetInitials(string fullName)
        => string.Concat(fullName.Split(' ').Select(x => x[0]));
}
