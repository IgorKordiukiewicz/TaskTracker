@page "/project/{projectId:guid}/tasks/{displayTypeStr}"
@page "/project/{projectId:guid}/"

@layout ProjectLayout
@attribute [Authorize]

@inject RequestHandler _requestHandler
@inject UserDataService _userDataService
@inject IAuthorizationService _authorizationService

@if(_tasksVM is not null && _membersVM is not null)
{
    <div class="d-flex flex-column max-height">
        <MudPaper Class="mb-2" Style="width: 100%;">
            <MudGrid Class="d-flex align-end  pa-3" Spacing="1">
                <MudItem lg="3" xs="12">
                    <MudTextField T="string" @bind-Value="_filters.Title" Label="Title" Variant="Variant.Filled" AdornmentIcon="@Icons.Material.Filled.Search" Adornment="Adornment.Start" Class="flex-grow-1" FullWidth="true"></MudTextField>
                </MudItem>
                <MudItem lg="2" xs="12">
                    <MudSelect Label="Status" Variant="Variant.Filled" MultiSelection="true" SelectAll="true" SelectAllText="All" @bind-SelectedValues="_filters.Statuses"
                               ToStringFunc="@(x => x.Name)" FullWidth="true" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var status in _tasksVM.AllTaskStatuses)
                        {
                            <MudSelectItem Value="@status"></MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem lg="2" xs="12">
                    <MudSelect Label="Priority" Variant="Variant.Filled" MultiSelection="true" SelectAll="true" SelectAllText="All" @bind-SelectedValues="_filters.Priorities"
                               FullWidth="true" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var priority in Enum.GetValues<TaskPriority>())
                        {
                            <MudSelectItem Value="@priority"></MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem lg="2" xs="12">
                    <MudSelect Label="Assignee" Variant="Variant.Filled" MultiSelection="true" SelectAll="true" SelectAllText="All" @bind-SelectedValues="_filters.Assignees"
                               ToStringFunc="@(x => x.Name)" FullWidth="true" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var member in GetAssigneesForFilters())
                        {
                            <MudSelectItem Value="@member"></MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem lg="1" xs="4">
                    <MudButton Variant="Variant.Filled" Color="Color.Info" StartIcon="@Icons.Material.Filled.Clear" Style="height: 55px;" FullWidth="true" OnClick="() => { _filters = new(); FilterTasks(); }">
                        Clear
                    </MudButton>
                </MudItem>
                <MudItem lg="1" xs="4">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Search" Style="height: 55px;" FullWidth="true" OnClick="() => FilterTasks()">
                    Search
                </MudButton>
                </MudItem>
                <!--TODO: use d-flex instead of column layout?-->
                @if (_createTasksPermissions)
                {
                    <MudItem lg="1" xs="4">
                        <MudButton Variant="Variant.Filled" Color="Color.Tertiary" OnClick="() => _createTaskForm.Open()" Style="height: 55px;" StartIcon="@Icons.Material.Filled.AddTask" FullWidth="true">
                            Create
                        </MudButton>
                    </MudItem>
                }
            </MudGrid>
        </MudPaper>
        <MudOverlay Visible="@(_openedTaskId is not null)" DarkBackground="true">
            <MudPaper Class="pa-6" Style="width: 640px;">
                @{
                    var currentTaskVM = _tasksVM.Tasks.Single(x => x.Id == _openedTaskId);
                }
                <div class="d-flex justify-space-between align-center mb-4">
                    <MudText Typo="Typo.h4">
                        @($"#{currentTaskVM.ShortId} {@currentTaskVM.Title}")
                    </MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="CloseTaskDetailsPopup" />
                </div>
                <MudGrid>
                    <MudDivider />
                    <MudItem md="12">
                        @if(_transitionTasksPermissions)
                        {
                            <MudSelect T="TaskStatusVM" Value="@currentTaskVM.Status" ValueChanged="e => UpdateTaskStatus(currentTaskVM.Id, e.Id)"
                                       ToStringFunc="@(x => x.Name)" Label="Status" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter">
                                @foreach (var status in currentTaskVM.PossibleNextStatuses)
                                {
                                    <MudSelectItem Value="@status"></MudSelectItem>
                                }
                            </MudSelect>
                        }
                        else
                        {
                            <MudField Variant="Variant.Filled" Label="Status">
                                @currentTaskVM.Status.Name
                            </MudField>
                        }
                        @if(_modifyTasksPermissions)
                        {
                            <MudSelect T="TaskPriority" Value="@currentTaskVM.Priority" ValueChanged="e => UpdateTaskPriority(currentTaskVM.Id, e)"
                                       Label="Priority" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter">
                                @foreach (var priority in Enum.GetValues<TaskPriority>())
                                {
                                    <MudSelectItem Value="@priority"></MudSelectItem>
                                }
                            </MudSelect>
                        }
                        else
                        {
                            <MudField Variant="Variant.Filled" Label="Priority">
                                @currentTaskVM.Priority
                            </MudField>
                        }                    
                        @if (_membersVM is not null)
                        {
                            @if(_assignTasksPermissions)
                            {
                                <MudSelect T="ProjectMemberVM" Value="@GetCurrentAssigneeVM(currentTaskVM.AssigneeId)" ValueChanged="e => UpdateTaskAssignee(currentTaskVM.Id, e.Id)"
                                       ToStringFunc="@(x => x.Name)" Label="Assignee" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter">
                                @foreach (var member in GetPossibleAssignees(currentTaskVM.AssigneeId))
                                {
                                    <MudSelectItem Value="@member"></MudSelectItem>
                                }
                                </MudSelect>
                            }
                            else
                            {
                                <MudField Variant="Variant.Filled" Label="Assignee">
                                    @(GetCurrentAssigneeVM(currentTaskVM.AssigneeId)?.Name ?? string.Empty)
                                </MudField>
                            }
                        }
                    </MudItem>
                    <MudDivider />
                    <MudItem xs="12">
                        <div class="d-flex justify-space-between align-center">
                            <MudText Typo="Typo.h6">
                                Description
                            </MudText>
                            @if(_modifyTasksPermissions && !_editDescriptionForm.Visible)
                            {
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="() => _editDescriptionForm.Open()" />
                            }
                            else if(_editDescriptionForm.Visible)
                            {
                                <div class="d-flex justify-end gap-2">
                                    <MudButton Variant="Variant.Filled" Color="Color.Dark" OnClick="() => _editDescriptionForm.Close()">
                                        Cancel
                                    </MudButton>
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_editDescriptionForm.IsValid())" OnClick="() => UpdateTaskDescription(currentTaskVM.Id)">
                                        Save
                                    </MudButton>
                                </div>
                            }
                        </div>
                        @if(_editDescriptionForm.Visible)
                        {
                            <MudTextField @bind-Value="_editDescriptionForm.Content" Variant="Variant.Filled" Label="Enter description" AutoGrow></MudTextField>
                        }
                        else
                        {
                            <MudText Typo="Typo.body1">
                                @currentTaskVM.Description
                            </MudText>
                        }
                    </MudItem>
                    <MudDivider />
                    <MudItem xs="12">
                        <MudText Typo="Typo.h6">
                            Comments
                        </MudText>
                        @if(_addCommentsPermissions)
                        {
                            if (_addCommentForm.Visible)
                            {
                                <MudTextField @bind-Value="_addCommentForm.Content" Variant="Variant.Filled" Label="New comment" Class="mb-1"></MudTextField>
                                <div class="d-flex justify-end gap-2">
                                    <MudButton Variant="Variant.Filled" Color="Color.Dark" OnClick="() => _addCommentForm.Close()">
                                        Cancel
                                    </MudButton>
                                    <MudButton Variant="Variant.Filled" Color="Color.Success" Disabled="@(!_addCommentForm.IsValid())" OnClick="AddNewComment">
                                        Add
                                    </MudButton>
                                </div>
                            }
                            else
                            {
                                <MudButton Variant="Variant.Filled" Color="Color.Success" FullWidth="true" Class="mb-4 mt-1" OnClick="() => _addCommentForm.Open()">
                                    Add Comment
                                </MudButton>
                            }
                        }
                        @if (_commentsVM is not null)
                        {
                            <div class="d-flex flex-column gap-4">
                                @foreach (var comment in _commentsVM.Comments)
                                {
                                    <div>
                                        <div class="d-flex mb-1 align-center justify-space-between">
                                            <div class="d-flex align-center gap-2">
                                                <UserAvatar Name="@comment.AuthorName" />
                                                <MudText Style="font-weight: bold;">@comment.AuthorName</MudText>
                                            </div>
                                            <MudText Typo="Typo.caption">@comment.CreatedAt.GetHumanReadableTimeDifference(DateTime.Now)</MudText>
                                        </div>
                                        <div class="pa-2 comment-text">
                                            <MudText>
                                                @comment.Content
                                            </MudText>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudOverlay>
        @if(GetDisplayType() == DisplayType.Table)
        {
            <MudTable Items="@_tasks" Hover="true" RowClass="clickable" OnRowClick="(TableRowClickEventArgs<TaskVM> args) => OpenTaskDetailsPopup(args.Item.Id)" Bordered="true">
                <ColGroup>
                    <col style="width: 100px;" />
                    <col />
                    <col style="width: 200px;" />
                    <col style="width: 200px;" />
                    <col style="width: 200px;" />
                </ColGroup>
                <HeaderContent>
                    <MudTh>ID</MudTh>
                    <MudTh>Title</MudTh>
                    <MudTh>Status</MudTh>
                    <MudTh>Priority</MudTh>
                    <MudTh>Assignee</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="ID">@context.ShortId</MudTd>
                    <MudTd DataLabel="Title">@context.Title</MudTd>
                    <MudTd DataLabel="Status">@context.Status.Name</MudTd>
                    <MudTd DataLabel="Priority">@context.Priority</MudTd>
                    <MudTd DataLabel="Assignee">@(GetCurrentAssigneeVM(context.AssigneeId)?.Name ?? "-")</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager HorizontalAlignment="HorizontalAlignment.End" />
                </PagerContent>
            </MudTable>
        }
        else
        {
        <div class="status-board-container">
            <MudDropContainer T="TaskVM" Items="@_tasks" ItemsSelector="@((items, dropzone) => items.Status.Name == dropzone)" ApplyDropClassesOnDragStarted="true" Class="status-board gap-6"
                              ItemDropped="TaskDropped" CanDropClass="mud-border-success" NoDropClass="mud-border-error">
                <ChildContent>
                    @foreach (var status in _tasksVM.AllTaskStatuses.OrderBy(x => x.DisplayOrder).Select(x => x.Name))
                    {
                        <div style="margin-bottom: 40px;">
                                <MudDropZone Identifier="@status" T="TaskVM" Class="rounded mud-background-gray pa-6 mt-4 border-2 border-solid mud-border-lines-default" Style="overflow-y: auto; height: 100%;"
                                             CanDrop="@((item) => _transitionTasksPermissions && item.PossibleNextStatuses.Any(x => x.Name == status))">
                                    <MudText Typo="Typo.h6" Style="width: 350px;" Align="Align.Center">
                                        @status
                                    </MudText>
                                </MudDropZone>
                        </div>
                        
                    }
                </ChildContent>
                <ItemRenderer>
                    <MudPaper Class="pa-4 my-4">
                        <div class="d-flex align-center justify-space-between">
                            @context.Title
                            <MudIconButton Icon="@Icons.Material.Filled.MoreHoriz" OnClick="() => OpenTaskDetailsPopup(context.Id)" />
                        </div>
                    </MudPaper>
                </ItemRenderer>
            </MudDropContainer>
        </div>

        }
    </div>
}

<Dialog Title="Create a new task" Form="_createTaskForm" OnConfirm="CreateTask">
    <MudTextField @bind-Value="@_createTaskForm.Title" Label="Title" Required="true" Variant="Variant.Filled" />
    <MudTextField @bind-Value="@_createTaskForm.Description" Label="Description" Variant="Variant.Filled" />
    <MudSelect @bind-Value="@_createTaskForm.Priority" Label="Priority" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter">
        @foreach(var priority in Enum.GetValues<TaskPriority>())
        {
            <MudSelectItem Value="@priority"></MudSelectItem>
        }
    </MudSelect>
    @if (_membersVM is not null)
    {
        <MudSelect T="ProjectMemberVM" Value="@GetCurrentAssigneeVM(_createTaskForm.Assignee?.UserId)" ValueChanged="e => { _createTaskForm.Assignee = e; }"
                   ToStringFunc="@(x => x.Name)" Label="Assignee" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter">
            @foreach (var member in GetPossibleAssignees(_createTaskForm.Assignee?.UserId))
            {
                <MudSelectItem Value="@member"></MudSelectItem>
            }
        </MudSelect>
    }
</Dialog>

@code {
    [Parameter]
    public Guid ProjectId { get; init; }

    [Parameter]
    public string? DisplayTypeStr { get; set; }

    [CascadingParameter]
    public ProjectLayout Layout { get; set; } = null!;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; } = null!;

    private bool _createTasksPermissions = false;
    private bool _modifyTasksPermissions = false;
    private bool _transitionTasksPermissions = false;
    private bool _assignTasksPermissions = false;
    private bool _addCommentsPermissions = false;

    private TasksVM? _tasksVM;
    private Dictionary<string, Guid>? _taskStatusIdByName = new();
    private IEnumerable<TaskVM>? _tasks;

    private ProjectMembersVM? _membersVM;
    private Dictionary<Guid, string> _memberNameById = new();

    private Guid? _openedTaskId = null;
    private TaskCommentsVM? _commentsVM = null;
    private class AddCommentForm : DialogForm
    {
        public string Content { get; set; } = string.Empty;

        public override bool IsValid() => !string.IsNullOrWhiteSpace(Content);
    }
    private AddCommentForm _addCommentForm = new();

    private class EditDescriptionForm : DialogForm
    {
        public string Content { get; set; } = string.Empty;

        public override bool IsValid() => !string.IsNullOrWhiteSpace(Content);
    }
    private EditDescriptionForm _editDescriptionForm = new();

    private enum DisplayType
    {
        Table,
        Board
    }

    private class CreateTaskForm : DialogForm
    {
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public TaskPriority Priority { get; set; } = TaskPriority.Normal;
        public ProjectMemberVM? Assignee { get; set; } = null;

        public override bool IsValid() => !string.IsNullOrWhiteSpace(Title);
    }
    private CreateTaskForm _createTaskForm = new();

    private class Filters
    {
        public string Title { get; set; } = string.Empty;
        public IEnumerable<TaskStatusDetailedVM> Statuses { get; set; } = new List<TaskStatusDetailedVM>();
        public IEnumerable<ProjectMemberVM> Assignees { get; set; } = new List<ProjectMemberVM>();
        public IEnumerable<TaskPriority> Priorities { get; set; } = new List<TaskPriority>();
    }
    private Filters _filters = new();

    protected override async Task OnInitializedAsync()
    {
        await Layout.SetProjectId(ProjectId);

        var user = (await AuthenticationState).User;
        // TODO: Refactor
        _createTasksPermissions = _userDataService.HasProjectPermissions(ProjectId, ProjectPermissions.CreateTasks);
        _modifyTasksPermissions = _userDataService.HasProjectPermissions(ProjectId, ProjectPermissions.ModifyTasks);
        _transitionTasksPermissions = _userDataService.HasProjectPermissions(ProjectId, ProjectPermissions.TransitionTasks);
        _assignTasksPermissions = _userDataService.HasProjectPermissions(ProjectId, ProjectPermissions.AssignTasks);
        _addCommentsPermissions = _userDataService.HasProjectPermissions(ProjectId, ProjectPermissions.AddComments);

        await UpdateTasksVM();
        _membersVM = await _requestHandler.GetAsync<ProjectMembersVM>($"projects/{ProjectId}/members");
        if(_membersVM is not null)
        {
            _memberNameById = _membersVM.Members.ToDictionary(k => k.Id, v => v.Name);
        }
    }

    private DisplayType GetDisplayType() => (DisplayTypeStr?.ToLower() ?? string.Empty) switch
    {
        "table" => DisplayType.Table,
        "board" => DisplayType.Board,
        _ => DisplayType.Table
    };

    private void FilterTasks()
    {
        var titleLower = _filters.Title.ToLower();
        var statuses = _filters.Statuses.Select(x => x.Id).ToHashSet();
        var assignees = _filters.Assignees.Select(x => x.UserId).ToHashSet();
        var priorities = _filters.Priorities.ToHashSet();

        _tasks = _tasksVM!.Tasks.Where(x => 
            (!string.IsNullOrWhiteSpace(titleLower) ? x.Title.ToLower().Contains(titleLower) : true)
            && (statuses.Any() ? statuses.Contains(x.Status.Id) : true)
            && (assignees.Any() ? assignees.Contains(x.AssigneeId.GetValueOrDefault()) : true)
            && (priorities.Any() ? priorities.Contains(x.Priority) : true))
            .ToList();
    }

    private async Task UpdateTasksVM()
    {
        _tasksVM = await _requestHandler.GetAsync<TasksVM>("tasks", new[] { ("ProjectId", ProjectId.ToString() )});
        _taskStatusIdByName = _tasksVM?.AllTaskStatuses
            .ToDictionary(x => x.Name, x => x.Id);
        FilterTasks();
    }

    private async Task UpdateTaskStatus(Guid taskId, Guid newStatusId)
    {
        await _requestHandler.PostAsync($"tasks/{taskId}/update-status/{newStatusId}", headers: new[] { ("ProjectId", ProjectId.ToString()) });
        await UpdateTasksVM(); // TODO: Optimize it, don't fetch all tasks again
    }

    private async Task UpdateTaskPriority(Guid taskId, TaskPriority newPriority)
    {
        var model = new UpdateTaskPriorityDto(newPriority);
        await _requestHandler.PostAsync($"tasks/{taskId}/update-priority", model, headers: new[] { ("ProjectId", ProjectId.ToString()) });
        await UpdateTasksVM();
    }

    private async Task UpdateTaskAssignee(Guid taskId, Guid memberId)
    {
        var model = new UpdateTaskAssigneeDto(memberId != Guid.Empty ? memberId : null);
        await _requestHandler.PostAsync($"tasks/{taskId}/update-assignee", model, headers: new[] { ("ProjectId", ProjectId.ToString()) });
        await UpdateTasksVM();
    }

    private async Task UpdateTaskDescription(Guid taskId)
    {
        if(!_editDescriptionForm.IsValid())
        {
            return;            
        }

        var model = new UpdateTaskDescriptionDto(_editDescriptionForm.Content);
        await _requestHandler.PostAsync($"tasks/{taskId}/update-description", model, headers: new[] { ("ProjectId", ProjectId.ToString()) });

        await UpdateTasksVM();
        _editDescriptionForm = new();
    }

    private async Task TaskDropped(MudItemDropInfo<TaskVM> dropItem)
    {
        if(dropItem.Item is null || _taskStatusIdByName is null)
        {
            return;
        }

        await UpdateTaskStatus(dropItem.Item.Id, _taskStatusIdByName[dropItem.DropzoneIdentifier]);
    }

    private async Task CreateTask()
    {
        if(!_createTaskForm.IsValid())
        {
            return;
        }

        var model = new CreateTaskDto()
        {
            Title =_createTaskForm.Title,
            Description = _createTaskForm.Description,
            Priority = _createTaskForm.Priority,
            AssigneeMemberId = _createTaskForm.Assignee?.Id
        };
        await _requestHandler.PostAsync("tasks", model, new[] { ("ProjectId", ProjectId.ToString()) });
        await UpdateTasksVM();
        _createTaskForm = new();
    }

    private async Task OpenTaskDetailsPopup(Guid taskId)
    {
        _openedTaskId = taskId;
        _addCommentForm = new();
        _editDescriptionForm = new();
        await UpdateCommentsVM();
    }

    private void CloseTaskDetailsPopup()
    {
        _openedTaskId = null;
    }

    private async Task AddNewComment()
    {
        if (!_addCommentForm.IsValid())
        {
            return;
        }

        var model = new AddTaskCommentDto(_addCommentForm.Content);
        await _requestHandler.PostAsync($"tasks/{_openedTaskId}/comments", model, new[] { ("ProjectId", ProjectId.ToString()) });

        await UpdateCommentsVM();
        _addCommentForm = new();
    }

    private async Task UpdateCommentsVM()
    {
        _commentsVM = await _requestHandler.GetAsync<TaskCommentsVM>($"tasks/{_openedTaskId}/comments", new[] { ("ProjectId", ProjectId.ToString()) });
    }

    private ProjectMemberVM? GetCurrentAssigneeVM(Guid? assigneeId)
    {
        return _membersVM!.Members.FirstOrDefault(x => x.UserId == assigneeId) ?? null;
    }

    private IEnumerable<ProjectMemberVM> GetPossibleAssignees(Guid? assigneeId)
    {
        if (assigneeId is not null && assigneeId != Guid.Empty)
        {
            return _membersVM!.Members.Where(x => x.UserId != assigneeId.Value).Append(new(Guid.Empty, Guid.Empty, "-", Guid.Empty)).Reverse();
        }
        else
        {
            return _membersVM!.Members;
        }
    }

    private IEnumerable<ProjectMemberVM> GetAssigneesForFilters()
    {
        var currentUserMember = _membersVM!.Members.First(x => x.UserId == _userDataService.CurrentUserVM!.Id);
        return new ProjectMemberVM[] { new(Guid.Empty, Guid.Empty, "-", Guid.Empty), new(currentUserMember.Id, currentUserMember.UserId, "@me", currentUserMember.RoleId) }.Concat(_membersVM.Members);
    }
}
