@page "/project/{projectId:guid}/workflow"
@layout ProjectLayout
@attribute [Authorize]

@using Blazor.Diagrams;
@using Blazor.Diagrams.Components
@using Blazor.Diagrams.Components.Widgets
@using Blazor.Diagrams.Core.Anchors;
@using Blazor.Diagrams.Core.Behaviors;
@using Blazor.Diagrams.Core.Geometry;
@using Blazor.Diagrams.Core.Models;
@using Blazor.Diagrams.Core.Models.Base;
@using Blazor.Diagrams.Core.PathGenerators;
@using Blazor.Diagrams.Core.Positions;
@using Blazor.Diagrams.Core.Routers;
@using Blazor.Diagrams.Options;
@using System.Text.Json;
@using Web.Client.Common;
@using Web.Client.Diagrams;
@using static Web.Client.Components.TaskStatusNode;

@inject HttpClient _httpClient
@inject IDialogService _dialogService

@if(_workflowVM is not null)
{
    <MudGrid Class="mt-2">
        <MudItem md="2">
            <div class="d-flex flex-column gap-2">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => _addStatusForm.Open()" FullWidth="true">Add Status</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => _addTransitionForm.Open()" FullWidth="true">Add Transition</MudButton>
                @if(_selectedNode is not null)
                {
                    <MudDivider />
                    <MudText>@_selectedNode.Name</MudText>
                }
            </div>
        </MudItem>
        <MudItem md="10">
            <MudPaper>
                <div class="diagram-container" style="height: calc(100vh - 130px); width: 100%; border: 2px solid white; border-radius: 10px;">
                    <CascadingValue Value="_diagram" IsFixed="true">
                        <DiagramCanvas>
                        </DiagramCanvas>
                    </CascadingValue>
                </div>
            </MudPaper>
        </MudItem>
    </MudGrid>
}

<MudDialog @bind-IsVisible="_addStatusForm.Visible">
    <TitleContent>
        <MudText>
            Add a new status
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="@_addStatusForm.Name" Label="Name" Required="true" />
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="() => _addStatusForm.Close()">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_addStatusForm.IsValid())" OnClick="AddStatus">Add</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="_addTransitionForm.Visible">
    <TitleContent>
        <MudText>
            Add a new transition
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudSelect T="string" Label="From Status" @bind-Value="_addTransitionForm.FromStatus">
            @foreach(var fromStatus in GetAvailableFromStatuses())
            {
                <MudSelectItem Value="@fromStatus" />
            }
        </MudSelect>
        <MudSelect T="string" Label="To Status" @bind-Value="_addTransitionForm.ToStatus" Disabled="@string.IsNullOrWhiteSpace(_addTransitionForm.FromStatus)">
            @if (!string.IsNullOrWhiteSpace(_addTransitionForm.FromStatus))
            {
                foreach (var toStatus in GetAvailableToStatuses(_addTransitionForm.FromStatus))
                {
                    <MudSelectItem Value="@toStatus" />
                }
            }
        </MudSelect>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="() => _addTransitionForm.Close()">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_addTransitionForm.IsValid())" OnClick="AddTransition">Add</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [Parameter]
    public Guid ProjectId { get; init; }

    [CascadingParameter]
    public ProjectLayout Layout { get; set; } = null!;

    private RequestHandler _requestHandler = null!;

    private BlazorDiagram _diagram = null!;

    private WorkflowVM? _workflowVM;
    private Dictionary<string, Guid>? _taskIdByName;

    private class AddStatusForm : DialogForm
    {
        public string Name { get; set; } = string.Empty;

        public override bool IsValid() => !string.IsNullOrWhiteSpace(Name);
    }
    private AddStatusForm _addStatusForm = new();

    private class AddTransitionForm : DialogForm
    {
        public string FromStatus { get; set; } = string.Empty;
        public string ToStatus { get; set; } = string.Empty;

        public override bool IsValid()
        {
            if(string.IsNullOrWhiteSpace(FromStatus) || string.IsNullOrWhiteSpace(ToStatus))
            {
                return false;
            }

            return true;
        }
    }
    private AddTransitionForm _addTransitionForm = new();

    private TaskStatusNodeModel? _selectedNode = null;

    // Adding/removing transitions:
    // 1. Add transition button with form: fromNode & toNode and deleting transitions from diagram with confirmation dialog, and deleting nodes also from diagram with confirmation dialog
    // issue is that its hard to select transitions when they are in both directions. create 1 link (instead of 2) with 2 arrows and upon deleting select which direction to delete
    protected override async Task OnInitializedAsync()
    {
        Layout.ProjectId = ProjectId;
        _requestHandler = new(_httpClient, _dialogService);

        _workflowVM = await _requestHandler.GetAsync<WorkflowVM>($"workflows/project/{ProjectId}");
        if(_workflowVM is null)
        {
            return;
        }
        _taskIdByName = _workflowVM.TaskStatuses.ToDictionary(k => k.Name, v => v.Id);

        var options = new BlazorDiagramOptions
        {
            AllowMultiSelection = false,
            AllowPanning = false,
            Zoom =
            {
                Enabled = false,
            },
            Links =
            {
                DefaultRouter = new NormalRouter(),
                DefaultPathGenerator = new StraightPathGenerator(),
                DefaultColor = "#9E9E9E",
                RequireTarget = true,
            }
        };
        _diagram = new BlazorDiagram(options);
        _diagram.RegisterComponent<TaskStatusNodeModel, TaskStatusNode>();
        _diagram.GetBehavior<KeyboardShortcutsBehavior>()?.RemoveShortcut("Delete", false, false, false);
        _diagram.SelectionChanged += OnSelectionChanged;

        var currentPositionX = 50;
        var nodeByStatusId = new Dictionary<Guid, TaskStatusNodeModel>();
        foreach (var status in _workflowVM.Statuses)
        {
            var node = _diagram.Nodes.Add(new TaskStatusNodeModel(position: new Point(currentPositionX, 50))
            {
                Name = status.Name.ToUpper()
            });
            nodeByStatusId.Add(status.Id, node);

            currentPositionX += 150;
        }

        foreach(var transition in _workflowVM.Transitions)
        {
            var fromNode = nodeByStatusId[transition.FromStatusId];
            var toNode = nodeByStatusId[transition.ToStatusId];
                _diagram.Links.Add(DiagramFactory.CreateLink(fromNode, toNode));
            }
        }
    }

    private async Task UpdateWorkflowVM()
    {
        _workflowVM = await _requestHandler.GetAsync<WorkflowVM>($"workflows/project/{ProjectId}");
        if(_workflowVM is null)
        {
            return;
        }

        // TODO: Removing nodes, adding/removing links
        var nodesByNames = _diagram.Nodes.Select(x => (x as TaskStatusNodeModel)!.Name).ToHashSet();
        var newNodes = _workflowVM.TaskStatuses.Where(x => !nodesByNames.Contains(x.Name.ToUpper()));
        foreach(var newNode in newNodes)
        {
            _diagram.Nodes.Add(new TaskStatusNodeModel(position: new Point(50, 50))
            {
                Name = newNode.Name.ToUpper()
            });
        }
    }

    private async Task AddStatus()
    {
        if(!_addStatusForm.IsValid() || _workflowVM is null)
        {
            return;
        }

        var model = new AddWorkflowStatusDto(_addStatusForm.Name);
        await _requestHandler.PostAsync($"workflows/{_workflowVM.Id}/statuses", model, new[] { ("ProjectId", ProjectId.ToString()) });

        _addStatusForm = new();
        await UpdateWorkflowVM();
    }

    private async Task AddTransition()
    {
        if (!_addTransitionForm.IsValid() || _workflowVM is null)
        {
            return;
        }

        _addTransitionForm = new();
        // TODO
    }

    private void OnSelectionChanged(SelectableModel selectableModel)
    {
        _selectedNode = selectableModel.Selected ? selectableModel as TaskStatusNodeModel : null;
        StateHasChanged();
    }

    // TODO: Extract it somewhere so it could be tested? maybe to view model as methods?
    private List<string> GetAvailableFromStatuses()
    {
        if(_workflowVM is null)
        {
            return new();
        }

        var result = new List<string>();
        foreach (var status in _workflowVM.Statuses)
        {
            var fromTransitionsCount = _workflowVM.Transitions.Count(x => x.FromStatusId == status.Id);
            if (fromTransitionsCount < _workflowVM.Statuses.Count - 1)
            {
                result.Add(status.Name);
            }
        }

        return result;
    }

    private List<string> GetAvailableToStatuses(string fromStatus)
    {
        if (_taskIdByName is null || _workflowVM is null)
        {
            return new();
        }

        var fromStatusId = _taskIdByName[fromStatus];
        var availableStatusesIds = _workflowVM.Transitions.Where(x => x.FromStatusId == fromStatusId)
            .Select(x => x.ToStatusId).ToHashSet();

        return _workflowVM
            .Statuses.Where(x => !availableStatusesIds.Contains(x.Id) && x.Id != fromStatusId)
            .Select(x => x.Name)
            .ToList();
    }
}
