@page "/project/{projectId:guid}/workflow"
@layout ProjectLayout
@attribute [Authorize]

@using Blazor.Diagrams;
@using Blazor.Diagrams.Components
@using Blazor.Diagrams.Components.Widgets
@using Blazor.Diagrams.Core.Anchors;
@using Blazor.Diagrams.Core.Behaviors;
@using Blazor.Diagrams.Core.Events;
@using Blazor.Diagrams.Core.Geometry;
@using Blazor.Diagrams.Core.Models;
@using Blazor.Diagrams.Core.Models.Base;
@using Blazor.Diagrams.Core.PathGenerators;
@using Blazor.Diagrams.Core.Positions;
@using Blazor.Diagrams.Core.Routers;
@using Blazor.Diagrams.Options;
@using System.Text.Json;
@using Web.Client.Common;
@using Web.Client.Diagrams;
@using static Web.Client.Components.TaskStatusNode;

@inject HttpClient _httpClient
@inject IDialogService _dialogService
@inject ISnackbar _snackbar

@if(_workflowVM is not null)
{
    <MudGrid Class="mt-2">
        <MudItem md="2">
            <div class="d-flex flex-column gap-2">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => _addStatusForm.Open()" FullWidth="true">
                    Add Status
                </MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => _addTransitionForm.Open()" FullWidth="true" 
                    Disabled="@(!_workflowVM.GetAvailableFromStatuses().Any())">
                    Add Transition
                </MudButton>
                @if(_selectedNode is not null)
                {
                    <MudDivider />
                    <MudButton Variant="Variant.Filled" Color="Color.Error" FullWidth="true" OnClick="() => DeleteStatus(_selectedNode.Name)">Delete Status</MudButton>
                }
                @if(_selectedLink is not null)
                {
                    <MudDivider />
                    if(_selectedLink.Value.Bidirectional)
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Error" FullWidth="true" 
                            OnClick="() => DeleteTransition(_selectedLink.Value.SourceNode, _selectedLink.Value.TargetNode)">
                            <div class="d-flex flex-column">
                                <MudText Typo="Typo.button">
                                    Delete Transition
                                </MudText>
                                <MudDivider />
                                <div class="d-flex align-center gap-2">
                                    <MudText Typo="Typo.button">
                                        @_selectedLink.Value.SourceNode
                                    </MudText>
                                    <MudIcon Icon="@Icons.Material.Filled.ArrowRightAlt" />
                                    <MudText Typo="Typo.button">
                                        @_selectedLink.Value.TargetNode
                                    </MudText>
                                </div>
                            </div>
                        </MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Error" FullWidth="true" 
                            OnClick="() => DeleteTransition(_selectedLink.Value.TargetNode, _selectedLink.Value.SourceNode)">
                            <div class="d-flex flex-column">
                                <MudText Typo="Typo.button">
                                    Delete Transition
                                </MudText>
                                <MudDivider />
                                <div class="d-flex align-center gap-2">
                                    <MudText Typo="Typo.button">
                                        @_selectedLink.Value.TargetNode
                                    </MudText>
                                    <MudIcon Icon="@Icons.Material.Filled.ArrowRightAlt" />
                                    <MudText Typo="Typo.button">
                                        @_selectedLink.Value.SourceNode
                                    </MudText>
                                </div>
                            </div>
                        </MudButton>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Error" FullWidth="true" 
                            OnClick="() => DeleteTransition(_selectedLink.Value.SourceNode, _selectedLink.Value.TargetNode)">
                            Delete Transition
                        </MudButton>
                    }
                }
            </div>
        </MudItem>
        <MudItem md="10">
            <MudPaper>
                <div class="diagram-container" style="height: calc(100vh - 130px); width: 100%; border: 2px solid white; border-radius: 10px;">
                    <CascadingValue Value="_diagram" IsFixed="true">
                        <DiagramCanvas>
                        </DiagramCanvas>
                    </CascadingValue>
                </div>
            </MudPaper>
        </MudItem>
    </MudGrid>
}

<MudDialog @bind-IsVisible="_addStatusForm.Visible">
    <TitleContent>
        <MudText>
            Add a new status
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="@_addStatusForm.Name" Label="Name" Required="true" />
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="() => _addStatusForm.Close()">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_addStatusForm.IsValid())" OnClick="AddStatus">Add</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="_addTransitionForm.Visible">
    <TitleContent>
        <MudText>
            Add a new transition
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudSelect T="string" Label="From Status" @bind-Value="_addTransitionForm.FromStatus">
            @foreach(var fromStatus in _workflowVM.GetAvailableFromStatuses())
            {
                <MudSelectItem Value="@fromStatus" />
            }
        </MudSelect>
        <MudSelect T="string" Label="To Status" @bind-Value="_addTransitionForm.ToStatus" Disabled="@string.IsNullOrWhiteSpace(_addTransitionForm.FromStatus)">
            @if (!string.IsNullOrWhiteSpace(_addTransitionForm.FromStatus))
            {
                foreach (var toStatus in _workflowVM.GetAvailableToStatuses(_addTransitionForm.FromStatus, _statusIdByName))
                {
                    <MudSelectItem Value="@toStatus" />
                }
            }
        </MudSelect>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="() => _addTransitionForm.Close()">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_addTransitionForm.IsValid())" OnClick="AddTransition">Add</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter]
    public Guid ProjectId { get; init; }

    [CascadingParameter]
    public ProjectLayout Layout { get; set; } = null!;

    private RequestHandler _requestHandler = null!;

    private BlazorDiagram _diagram = null!;

    private WorkflowVM? _workflowVM;
    private Dictionary<string, Guid>? _statusIdByName;

    // TODO: Move forms to a separate file/folder and add unit tests for them?
    private class AddStatusForm : DialogForm
    {
        public string Name { get; set; } = string.Empty;

        public override bool IsValid() => !string.IsNullOrWhiteSpace(Name);
    }
    private AddStatusForm _addStatusForm = new();

    private class AddTransitionForm : DialogForm
    {
        public string FromStatus { get; set; } = string.Empty;
        public string ToStatus { get; set; } = string.Empty;

        public override bool IsValid()
            => !string.IsNullOrWhiteSpace(FromStatus) && !string.IsNullOrWhiteSpace(ToStatus);
    }
    private AddTransitionForm _addTransitionForm = new();

    private TaskStatusNodeModel? _selectedNode = null;
    private (string SourceNode, string TargetNode, bool Bidirectional)? _selectedLink = null;

    // Adding/removing transitions:
    // 1. Add transition button with form: fromNode & toNode and deleting transitions from diagram with confirmation dialog, and deleting nodes also from diagram with confirmation dialog
    // issue is that its hard to select transitions when they are in both directions. create 1 link (instead of 2) with 2 arrows and upon deleting select which direction to delete
    protected override async Task OnInitializedAsync()
    {
        Layout.ProjectId = ProjectId;
        _requestHandler = new(_httpClient, _dialogService);

        await UpdateWorkflowVM();
        if(_workflowVM is null)
        {
            return;
        }

        _snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        var options = new BlazorDiagramOptions
        {
            AllowMultiSelection = false,
            AllowPanning = false,
            Zoom =
            {
                Enabled = false,
            },
            Links =
            {
                DefaultRouter = new NormalRouter(),
                DefaultPathGenerator = new StraightPathGenerator(),
                DefaultColor = "#9E9E9E",
                RequireTarget = true,
            }
        };
        _diagram = new BlazorDiagram(options);
        _diagram.RegisterComponent<TaskStatusNodeModel, TaskStatusNode>();
        _diagram.GetBehavior<KeyboardShortcutsBehavior>()?.RemoveShortcut("Delete", false, false, false);
        _diagram.SelectionChanged += OnSelectionChanged;

        var currentPositionX = 50;
        var nodeByStatusId = new Dictionary<Guid, TaskStatusNodeModel>();
        foreach (var status in _workflowVM.Statuses)
        {
            var node = _diagram.Nodes.Add(new TaskStatusNodeModel(position: new Point(currentPositionX, 50))
            {
                Name = status.Name.ToUpper()
            });
            nodeByStatusId.Add(status.Id, node);

            currentPositionX += 150;
        }

        var linkCreatedByTransitionId = _workflowVM.Transitions.ToDictionary(k => (k.FromStatusId, k.ToStatusId), v => false);
        foreach(var transition in _workflowVM.Transitions)
        {
            var transitionKey = (transition.FromStatusId, transition.ToStatusId);
            if(linkCreatedByTransitionId[transitionKey])
            {
                continue;
            }

            var fromNode = nodeByStatusId[transition.FromStatusId];
            var toNode = nodeByStatusId[transition.ToStatusId];

            var reverseTransitionKey = (transition.ToStatusId, transition.FromStatusId);
            var bidirectional = linkCreatedByTransitionId.ContainsKey(reverseTransitionKey);

            _diagram.Links.Add(DiagramFactory.CreateLink(fromNode, toNode, bidirectional));

            linkCreatedByTransitionId[transitionKey] = true;
            if(bidirectional)
            {
                linkCreatedByTransitionId[reverseTransitionKey] = true;
            }
        }
    }

    private async Task UpdateWorkflowVM(string? newStatus = null, 
        string? deletedStatus = null,
        (string FromStatus, string ToStatus)? newTransition = null,
        (string FromStatus, string ToStatus)? deletedTransition = null)
    {
        _workflowVM = await _requestHandler.GetAsync<WorkflowVM>($"workflows/project/{ProjectId}");
        if(_workflowVM is null)
        {
            return;
        }
        var statusNameComparer = StringComparer.OrdinalIgnoreCase;
        _statusIdByName = _workflowVM.Statuses.ToDictionary(k => k.Name, v => v.Id, statusNameComparer);

        if(newStatus is not null)
        {
            _diagram.Nodes.Add(new TaskStatusNodeModel(position: new Point(50, 50))
            {
                Name = newStatus.ToUpper()
            });
        }

        if(deletedStatus is not null)
        {
            var deletedStatusNameUpper = deletedStatus.ToUpper();
            var node = _diagram.Nodes.First(x => (x as TaskStatusNodeModel)!.Name == deletedStatusNameUpper);
            _diagram.Nodes.Remove(node);

            var relatedLinks = _diagram.Links.Where(x =>
                (x.Source.Model as TaskStatusNodeModel)!.Name == deletedStatusNameUpper
                || (x.Target.Model as TaskStatusNodeModel)!.Name == deletedStatusNameUpper);
            _diagram.Links.Remove(relatedLinks);
        }

        if(newTransition is not null)
        {
            var nodeModelByStatusName = _diagram.Nodes.Select(x => (x as TaskStatusNodeModel)!)
                .ToDictionary(k => k.Name, v => v, statusNameComparer);

            var fromStatusNode = nodeModelByStatusName[newTransition.Value.FromStatus];
            var toStatusNode = nodeModelByStatusName[newTransition.Value.ToStatus];

            var reverseLink = _diagram.Links.FirstOrDefault(x => x.Source.Model == toStatusNode && x.Target.Model == fromStatusNode);
            if(reverseLink is not null)
            {
                reverseLink.SourceMarker = LinkMarker.Arrow;
                reverseLink.Refresh();
            }
            else
            {
                _diagram.Links.Add(DiagramFactory.CreateLink(fromStatusNode, toStatusNode));
            }
        }

        if(deletedTransition is not null)
        {
            var nodeModelByStatusName = _diagram.Nodes.Select(x => (x as TaskStatusNodeModel)!)
                .ToDictionary(k => k.Name, v => v, statusNameComparer);

            var fromStatusNode = nodeModelByStatusName[deletedTransition.Value.FromStatus];
            var toStatusNode = nodeModelByStatusName[deletedTransition.Value.ToStatus];

            var reverseLink = _diagram.Links.FirstOrDefault(x => x.Source.Model == toStatusNode && x.Target.Model == fromStatusNode);
            if (reverseLink is not null)
            {
                reverseLink.SourceMarker = null;
                reverseLink.Refresh();
            }
            else
            {
                var link = _diagram.Links.First(x => x.Source.Model == fromStatusNode && x.Target.Model == toStatusNode);
                _diagram.Links.Remove(link);
            }
        }
    }

    private async Task AddStatus()
    {
        if(!_addStatusForm.IsValid() || _workflowVM is null)
        {
            return;
        }

        var model = new AddWorkflowStatusDto(_addStatusForm.Name);
        var success = await _requestHandler.PostWithResultAsync($"workflows/{_workflowVM.Id}/statuses", model, new[] { ("ProjectId", ProjectId.ToString()) });

        if(success)
        {
            await UpdateWorkflowVM(newStatus: model.Name);
        }

        _addStatusForm = new();
    }

    private async Task AddTransition()
    {
        if (!_addTransitionForm.IsValid() || _statusIdByName is null)
        {
            return;
        }

        var fromStatusId = _statusIdByName[_addTransitionForm.FromStatus];
        var toStatusId = _statusIdByName[_addTransitionForm.ToStatus];
        var model = new AddWorkflowTransitionDto(fromStatusId, toStatusId);
        var success = await _requestHandler.PostWithResultAsync($"workflows/{_workflowVM!.Id}/transitions", model, new[] { ("ProjectId", ProjectId.ToString()) });

        if (success)
        {
            await UpdateWorkflowVM(newTransition: (_addTransitionForm.FromStatus, _addTransitionForm.ToStatus));
        }

        _addTransitionForm = new();
    }

    private void OnSelectionChanged(SelectableModel selectableModel)
    {
        _selectedNode = selectableModel.Selected ? selectableModel as TaskStatusNodeModel : null;
        if(selectableModel.Selected)
        {
            if(selectableModel is TaskStatusNodeModel node)
            {
                _selectedNode = node;
                _selectedLink = null;
            }
            else if(selectableModel is LinkModel link)
            {
                var sourceNodeName = (link.Source.Model as TaskStatusNodeModel)!.Name;
                var targetNodeName = (link.Target.Model as TaskStatusNodeModel)!.Name;
                var bidirectional = link.SourceMarker == LinkMarker.Arrow && link.TargetMarker == LinkMarker.Arrow;
                _selectedLink = (sourceNodeName, targetNodeName, bidirectional);
                _selectedNode = null;
            }
        }
        else
        {
            _selectedNode = null;
            _selectedLink = null;
        }

        StateHasChanged();
    }

    private void ShowStatusCantBeDeletedMessage()
    {
        _snackbar.Add("This status can't be deleted!", Severity.Warning);
    }

    private async Task<bool> CanStatusBeDeleted(string name)
    {
        var statusId = _statusIdByName![name];
        return await _requestHandler.GetAsync<bool>($"workflows/{_workflowVM!.Id}/statuses/{statusId}/can-be-deleted", new[] { ("ProjectId", ProjectId.ToString()) });
    }

    private async Task DeleteStatus(string name)
    {
        if(_statusIdByName is null)
        {
            return;
        }

        // TODO: yes/no instead of delete/canceL?
        if (await _dialogService.ShowMessageBox("Confirm action", $"Are you sure you want to delete the status {name}?", yesText: "Delete", cancelText: "Cancel") is null)
        {
            return;
        }

        var statusId = _statusIdByName[name];
        var success = await _requestHandler.PostWithResultAsync($"workflows/{_workflowVM!.Id}/statuses/{statusId}/delete", 
            headers: new[] { ("ProjectId", ProjectId.ToString()) });

        if (success)
        {
            _selectedNode = null;
            await UpdateWorkflowVM(deletedStatus: name);
        }
    }

    private async Task DeleteTransition(string fromStatusName, string toStatusName) // param for bidirectional?
    {
        if (_statusIdByName is null)
        {
            return;
        }

        // TODO: yes/no instead of delete/canceL?
        if (await _dialogService.ShowMessageBox("Confirm action", $"Are you sure you want to delete the transition from {fromStatusName} to {toStatusName}?", yesText: "Delete", cancelText: "Cancel") is null)
        {
            return;
        }

        var fromStatusId = _statusIdByName[fromStatusName];
        var toStatusId = _statusIdByName[toStatusName];
        var model = new DeleteWorkflowTransitionDto(fromStatusId, toStatusId);
        var success = await _requestHandler.PostWithResultAsync($"workflows/{_workflowVM!.Id}/transitions/delete", model,
            headers: new[] { ("ProjectId", ProjectId.ToString()) });

        if(success)
        {
            _selectedLink = null;
            await UpdateWorkflowVM(deletedTransition: (fromStatusName, toStatusName));
        }
    }
}
