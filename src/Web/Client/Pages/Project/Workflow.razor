@page "/project/{projectId:guid}/workflow"
@layout ProjectLayout
@attribute [Authorize(Policy = Policy.ProjectManageWorkflows)]

@using Blazor.Diagrams;
@using Blazor.Diagrams.Components
@using Blazor.Diagrams.Components.Widgets
@using Blazor.Diagrams.Core.Anchors;
@using Blazor.Diagrams.Core.Behaviors;
@using Blazor.Diagrams.Core.Events;
@using Blazor.Diagrams.Core.Geometry;
@using Blazor.Diagrams.Core.Models;
@using Blazor.Diagrams.Core.Models.Base;
@using Blazor.Diagrams.Core.PathGenerators;
@using Blazor.Diagrams.Core.Positions;
@using Blazor.Diagrams.Core.Routers;
@using Blazor.Diagrams.Options;
@using System.Text.Json;
@using Blazored.LocalStorage;
@using Web.Client.Diagrams;
@using static Web.Client.Components.TaskStatusNode;

@inject ISnackbar _snackbar
@inject WorkflowsService _workflowsService
@inject IDialogService _dialogService
@inject ILocalStorageService _localStorage

@if(_workflowVM is not null)
{
    <MudGrid Class="mt-2">
        <MudItem md="2">
            <div class="d-flex flex-column gap-2">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => _addStatusForm.Open()" FullWidth="true">
                    Add Status
                </MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => _addTransitionForm.Open()" FullWidth="true" 
                    Disabled="@(!_workflowVM.GetAvailableFromStatuses().Any())">
                    Add Transition
                </MudButton>
                @if(_selectedNode is not null)
                {
                    var canStatusBeDeleted = CanStatusBeDeleted(_selectedNode.Name);
                    @if(!_selectedNode.Initial)
                    {
                        <MudDivider />
                        <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="() => ChangeInitialStatus(_selectedNode.Name)">Make Initial</MudButton>
                    }
                    <MudDivider />
                    <MudTooltip ShowOnHover="!canStatusBeDeleted" ShowOnFocus="!canStatusBeDeleted" Text="@DisableStatusDeletionTooltipText(_selectedNode.Name)" id="status-delete-button-tooltip">
                        <MudButton Variant="Variant.Filled" Color="Color.Error" Style="width: 100%;" OnClick="() => DeleteStatus(_selectedNode.Name)" Disabled="!canStatusBeDeleted">Delete Status</MudButton>
                    </MudTooltip>
                }
                @if(_selectedLink is not null)
                {
                    <MudDivider />
                    if(_selectedLink.Value.Bidirectional)
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Error" FullWidth="true" 
                            OnClick="() => DeleteTransition(_selectedLink.Value.SourceNode, _selectedLink.Value.TargetNode)">
                            <div class="d-flex flex-column">
                                <MudText Typo="Typo.button">
                                    Delete Transition
                                </MudText>
                                <MudDivider />
                                <div class="d-flex align-center gap-2">
                                    <MudText Typo="Typo.button">
                                        @_selectedLink.Value.SourceNode
                                    </MudText>
                                    <MudIcon Icon="@Icons.Material.Filled.ArrowRightAlt" />
                                    <MudText Typo="Typo.button">
                                        @_selectedLink.Value.TargetNode
                                    </MudText>
                                </div>
                            </div>
                        </MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Error" FullWidth="true" 
                            OnClick="() => DeleteTransition(_selectedLink.Value.TargetNode, _selectedLink.Value.SourceNode)">
                            <div class="d-flex flex-column">
                                <MudText Typo="Typo.button">
                                    Delete Transition
                                </MudText>
                                <MudDivider />
                                <div class="d-flex align-center gap-2">
                                    <MudText Typo="Typo.button">
                                        @_selectedLink.Value.TargetNode
                                    </MudText>
                                    <MudIcon Icon="@Icons.Material.Filled.ArrowRightAlt" />
                                    <MudText Typo="Typo.button">
                                        @_selectedLink.Value.SourceNode
                                    </MudText>
                                </div>
                            </div>
                        </MudButton>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Error" FullWidth="true" 
                            OnClick="() => DeleteTransition(_selectedLink.Value.SourceNode, _selectedLink.Value.TargetNode)">
                            Delete Transition
                        </MudButton>
                    }
                }
            </div>
        </MudItem>
        <MudItem md="10">
            <MudPaper>
                <div class="diagram-container">
                    <CascadingValue Value="_diagram" IsFixed="true">
                        <DiagramCanvas>
                        </DiagramCanvas>
                    </CascadingValue>
                </div>
            </MudPaper>
        </MudItem>
    </MudGrid>
}

<Dialog Title="Add a new status" Form="_addStatusForm" ConfirmButtonText="Add" OnConfirm="AddStatus">
    <MudTextField @bind-Value="@_addStatusForm.Name" Label="Name" Required="true" Variant="Variant.Filled" />
</Dialog>

<Dialog Title="Add a new transition" Form="_addTransitionForm" ConfirmButtonText="Add" OnConfirm="AddTransition">
    <MudSelect T="string" Label="From Status" @bind-Value="_addTransitionForm.FromStatus" AnchorOrigin="Origin.BottomCenter">
        @foreach (var fromStatus in _workflowVM.GetAvailableFromStatuses())
        {
            <MudSelectItem Value="@fromStatus" />
        }
    </MudSelect>
    <MudSelect T="string" Label="To Status" @bind-Value="_addTransitionForm.ToStatus" Disabled="@string.IsNullOrWhiteSpace(_addTransitionForm.FromStatus)" 
        AnchorOrigin="Origin.BottomCenter">
        @if (!string.IsNullOrWhiteSpace(_addTransitionForm.FromStatus))
        {
            foreach (var toStatus in _workflowVM.GetAvailableToStatuses(_addTransitionForm.FromStatus, _statusIdByName))
            {
                <MudSelectItem Value="@toStatus" />
            }
        }
    </MudSelect>
</Dialog>

<ConfirmDeleteBox @ref="_confirmDeleteBox"></ConfirmDeleteBox>

@code {
    [Parameter]
    public Guid ProjectId { get; init; }

    [CascadingParameter]
    public ProjectLayout Layout { get; set; } = null!;

    private BlazorDiagram _diagram = null!;

    private WorkflowVM? _workflowVM;
    private Dictionary<string, Guid>? _statusIdByName;

    private class AddStatusForm : DialogForm
    {
        public string Name { get; set; } = string.Empty;

        public override bool IsValid() => !string.IsNullOrWhiteSpace(Name);
    }
    private AddStatusForm _addStatusForm = new();

    private class AddTransitionForm : DialogForm
    {
        public string FromStatus { get; set; } = string.Empty;
        public string ToStatus { get; set; } = string.Empty;

        public override bool IsValid()
            => !string.IsNullOrWhiteSpace(FromStatus) && !string.IsNullOrWhiteSpace(ToStatus);
    }
    private AddTransitionForm _addTransitionForm = new();

    private TaskStatusNodeModel? _selectedNode = null;
    private (string SourceNode, string TargetNode, bool Bidirectional)? _selectedLink = null;

    private ConfirmDeleteBox _confirmDeleteBox = null!;

    protected override async Task OnInitializedAsync()
    {
        await Layout.SetProjectId(ProjectId);

        await UpdateWorkflowVM();
        if(_workflowVM is null)
        {
            return;
        }

        _snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        var options = new BlazorDiagramOptions
        {
            AllowMultiSelection = false,
            AllowPanning = false,
            Zoom =
            {
                Enabled = false,
            },
            Links =
            {
                DefaultRouter = new NormalRouter(),
                DefaultPathGenerator = new StraightPathGenerator(),
                DefaultColor = "#9E9E9E",
                RequireTarget = true,
            }
        };
        _diagram = new BlazorDiagram(options);
        _diagram.RegisterComponent<TaskStatusNodeModel, TaskStatusNode>();
        _diagram.GetBehavior<KeyboardShortcutsBehavior>()?.RemoveShortcut("Delete", false, false, false);
        _diagram.SelectionChanged += OnSelectionChanged;

        var savedLayout = await _localStorage.GetDiagramLayout(ProjectId);
        _diagram.InitializeStatusNodes(_workflowVM.Statuses, savedLayout, out var nodeByStatusId);
        _diagram.InitializeTransitionLinks(_workflowVM.Transitions, nodeByStatusId);

        foreach(var node in _diagram.Nodes)
        {
            node.Moved += OnNodeMoved;
        }
    }

    private async void OnNodeMoved(MovableModel? model)
    {
        await SaveDiagramLayout();
    }

    private async Task UpdateWorkflowVM(string? newStatus = null, 
        string? deletedStatus = null,
        (string FromStatus, string ToStatus)? newTransition = null,
        (string FromStatus, string ToStatus)? deletedTransition = null)
    {
        _workflowVM = await _workflowsService.Get(ProjectId);
        if(_workflowVM is null)
        {
            return;
        }
        var statusNameComparer = StringComparer.OrdinalIgnoreCase;
        _statusIdByName = _workflowVM.Statuses.ToDictionary(k => k.Name, v => v.Id, statusNameComparer);

        if(newStatus is not null)
        {
            _diagram.AddStatusNode(newStatus);
        }

        if(deletedStatus is not null)
        {
            _diagram.DeleteStatusNode(deletedStatus);
        }

        if(newTransition is not null)
        {
            _diagram.AddTransitionLink(newTransition.Value);
        }

        if(deletedTransition is not null)
        {
            _diagram.DeleteTransitionLink(deletedTransition.Value);
        }

        if(_diagram is not null)
        {
            await SaveDiagramLayout();
        }
    }

    private async Task AddStatus()
    {
        if(!_addStatusForm.IsValid() || _workflowVM is null)
        {
            return;
        }

        var model = new AddWorkflowStatusDto(_addStatusForm.Name);
        var success = await _workflowsService.AddStatus(_workflowVM.Id, ProjectId, model);

        if(success)
        {
            await UpdateWorkflowVM(newStatus: model.Name);
        }

        _addStatusForm = new();
    }

    private async Task AddTransition()
    {
        if (!_addTransitionForm.IsValid() || _statusIdByName is null || _workflowVM is null)
        {
            return;
        }

        var fromStatusId = _statusIdByName[_addTransitionForm.FromStatus];
        var toStatusId = _statusIdByName[_addTransitionForm.ToStatus];
        var model = new AddWorkflowTransitionDto(fromStatusId, toStatusId);
        var success = await _workflowsService.AddTransition(_workflowVM.Id, ProjectId, model);

        if (success)
        {
            await UpdateWorkflowVM(newTransition: (_addTransitionForm.FromStatus, _addTransitionForm.ToStatus));
        }

        _addTransitionForm = new();
    }

    private void OnSelectionChanged(SelectableModel selectableModel)
    {
        _selectedNode = selectableModel.Selected ? selectableModel as TaskStatusNodeModel : null;
        if(selectableModel.Selected)
        {
            if(selectableModel is TaskStatusNodeModel node)
            {
                _selectedNode = node;
                _selectedLink = null;
            }
            else if(selectableModel is LinkModel link)
            {
                var sourceNodeName = (link.Source.Model as TaskStatusNodeModel)!.Name;
                var targetNodeName = (link.Target.Model as TaskStatusNodeModel)!.Name;
                var bidirectional = link.IsBidirectional();
                var reverseNodes = bidirectional ? false : link.SourceMarker == LinkMarker.Arrow;
                if(reverseNodes)
                {
                    _selectedLink = (targetNodeName, sourceNodeName, bidirectional);
                }
                else
                {
                    _selectedLink = (sourceNodeName, targetNodeName, bidirectional);
                }
                _selectedNode = null;
            }
        }
        else
        {
            _selectedNode = null;
            _selectedLink = null;
        }

        StateHasChanged();
    }

    private void ShowStatusCantBeDeletedMessage()
    {
        _snackbar.Add("This status can't be deleted!", Severity.Warning);
    }

    private bool CanStatusBeDeleted(string name)
    {
        var statusId = _statusIdByName![name];
        return _workflowVM!.Statuses.First(x => x.Id == statusId).DeletionEligibility == TaskStatusDeletionEligibility.Eligible;
    }

    private string DisableStatusDeletionTooltipText(string name)
    {
        var statusId = _statusIdByName![name];
        return _workflowVM!.Statuses.First(x => x.Id == statusId).DeletionEligibility switch
        {
            TaskStatusDeletionEligibility.Initial => "Initial status can't be deleted.",
            TaskStatusDeletionEligibility.InUse => "Status in use can't be deleted.",
            _ => string.Empty
        };
    }

    private async Task DeleteStatus(string name)
    {
        if(_statusIdByName is null)
        {
            return;
        }

        if(!await _confirmDeleteBox.Show($"Are you sure you want to delete the status {name}?"))
        {
            return;
        }

        var statusId = _statusIdByName[name];
        var success = await _workflowsService.DeleteStatus(_workflowVM!.Id, statusId, ProjectId);

        if (success)
        {
            _selectedNode = null;
            await UpdateWorkflowVM(deletedStatus: name);
        }
    }

    private async Task DeleteTransition(string fromStatusName, string toStatusName)
    {
        if (_statusIdByName is null)
        {
            return;
        }

        if (!await _confirmDeleteBox.Show($"Are you sure you want to delete the transition from {fromStatusName} to {toStatusName}?"))
        {
            return;
        }

        var fromStatusId = _statusIdByName[fromStatusName];
        var toStatusId = _statusIdByName[toStatusName];
        var model = new DeleteWorkflowTransitionDto(fromStatusId, toStatusId);
        var success = await _workflowsService.DeleteTransition(_workflowVM!.Id, ProjectId, model);

        if(success)
        {
            _selectedLink = null;
            await UpdateWorkflowVM(deletedTransition: (fromStatusName, toStatusName));
        }
    }

    private async Task ChangeInitialStatus(string statusName)
    {
        if (_statusIdByName is null)
        {
            return;
        }

        var statusId = _statusIdByName[statusName];
        var model = new ChangeInitialWorkflowStatusDto(statusId);
        var success = await _workflowsService.ChangeInitialStatus(_workflowVM!.Id, ProjectId, model);

        var previousInitialNode = (_diagram.Nodes.First(x => (x as TaskStatusNodeModel)!.Initial) as TaskStatusNodeModel)!;
        previousInitialNode.Initial = false;
        previousInitialNode.Refresh();

        _selectedNode!.Initial = true;
        _selectedNode!.Refresh();

        await UpdateWorkflowVM();
    }

    private async Task SaveDiagramLayout()
    {
        await _localStorage.SaveDiagramLayout(_diagram, ProjectId);
    }
}
