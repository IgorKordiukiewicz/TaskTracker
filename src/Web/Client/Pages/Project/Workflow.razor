@page "/project/{projectId:guid}/workflow"
@layout ProjectLayout
@attribute [Authorize]

@using Blazor.Diagrams;
@using Blazor.Diagrams.Components
@using Blazor.Diagrams.Components.Widgets
@using Blazor.Diagrams.Core.Anchors;
@using Blazor.Diagrams.Core.Geometry;
@using Blazor.Diagrams.Core.Models;
@using Blazor.Diagrams.Core.PathGenerators;
@using Blazor.Diagrams.Core.Positions;
@using Blazor.Diagrams.Core.Routers;
@using Blazor.Diagrams.Options;
@using Web.Client.Diagrams;
@using static Web.Client.Components.TaskStatusNode;

@inject HttpClient _httpClient
@inject IDialogService _dialogService

@if(_workflowVM is not null)
{
    <MudPaper>
        <div class="diagram-container mt-6" style="height: calc(100vh - 130px); width: 100%; border: 2px solid white; border-radius: 10px;">
            <CascadingValue Value="_diagram" IsFixed="true">
                <DiagramCanvas>
                    <!--
                    <Widgets>
                        <GridWidget Size="30" Mode="GridMode.Line" BackgroundColor="gray" />
                    </Widgets>
                    -->
                </DiagramCanvas>
            </CascadingValue>
        </div>
    </MudPaper>
}


@code {
    [Parameter]
    public Guid ProjectId { get; init; }

    [CascadingParameter]
    public ProjectLayout Layout { get; set; } = null!;

    private RequestHandler _requestHandler = null!;

    private BlazorDiagram _diagram = null!;

    private WorkflowVM? _workflowVM;

    protected override async Task OnInitializedAsync()
    {
        Layout.ProjectId = ProjectId;
        _requestHandler = new(_httpClient, _dialogService);

        _workflowVM = await _requestHandler.GetAsync<WorkflowVM>($"workflows/project/{ProjectId}");
        if(_workflowVM is null)
        {
            return;
        }

        var options = new BlazorDiagramOptions
        {
            AllowMultiSelection = true,
            AllowPanning = false,
            Zoom =
            {
                Enabled = false,
            },
            Links =
            {
                DefaultRouter = new NormalRouter(),
                DefaultPathGenerator = new StraightPathGenerator(),
                DefaultColor = "#9E9E9E",
                RequireTarget = true,
            }
        };
        _diagram = new BlazorDiagram(options);
        _diagram.RegisterComponent<TaskStatusNodeModel, TaskStatusNode>();

        var currentPositionX = 50;
        var nodeByStatusId = new Dictionary<Guid, TaskStatusNodeModel>();
        foreach(var taskStatus in _workflowVM.TaskStatuses)
        {
            var node = _diagram.Nodes.Add(new TaskStatusNodeModel(position: new Point(currentPositionX, 50))
            {
                Name = taskStatus.Name.ToUpper()
            });
            nodeByStatusId.Add(taskStatus.Id, node);

            currentPositionX += 150;
        }

        foreach(var taskStatus in _workflowVM.TaskStatuses)
        {
            var fromNode = nodeByStatusId[taskStatus.Id];
            foreach(var possibleNextStatus in taskStatus.PossibleNextStatuses)
            {
                var toNode = nodeByStatusId[possibleNextStatus];
                _diagram.Links.Add(DiagramFactory.CreateLink(fromNode, toNode));
            }
        }
    }
}
