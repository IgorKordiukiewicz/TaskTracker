@page "/project/{projectId:guid}/team/members"
@layout ProjectLayout
@attribute [Authorize]

@inject ProjectsService ProjectsService
@inject UsersService UsersService
@inject UserDataService UserDataService

<PageHeading Content="Members">
    @if (_usersVM is not null && _addMembersPermission)
    {
        <div class="d-flex gap-2 align-end mb-1" style="width: 40%;">
            <MudSelect Label="Users" @bind-Value="_selectedUserVM" Variant="Variant.Filled" Disabled="@(!_usersVM.Users.Any())">
                @foreach (var user in _usersVM.Users)
                {
                    <MudSelectItem Value="@user">@user.Email</MudSelectItem>
                }
            </MudSelect>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="height: 56px; width: 100px;" Disabled="@(_selectedUserVM is null)" OnClick="@(() => AddMember(_selectedUserVM!.Id))">Add</MudButton>
        </div>
    }
</PageHeading>

@if (_membersVM is not null)
{
    <MembersList Members="@_membersVM.Members" ManageRolesPermission="_manageRolesPermission" RemoveMembersPermission="_removeMembersPermission" 
        MembersUpdated="UpdateMembersVM" RolesVM="@_rolesVM" 
        UpdateRoleFunc="async (memberId, model) => await ProjectsService.UpdateMemberRole(ProjectId, memberId, model)"
        RemoveMemberFunc="async (memberId) => await ProjectsService.RemoveMember(ProjectId, memberId)"
    ></MembersList>
}

@code {
    [Parameter]
    public Guid ProjectId { get; init; }

    [CascadingParameter]
    public ProjectLayout Layout { get; set; } = null!;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; } = null!;

    private bool _addMembersPermission;
    private bool _removeMembersPermission;
    private bool _manageRolesPermission;

    private ProjectMembersVM? _membersVM;
    private UsersSearchVM? _usersVM;
    private UserSearchVM? _selectedUserVM;
    private RolesVM<ProjectPermissions>? _rolesVM;

    protected override async Task OnInitializedAsync()
    {
        await Layout.SetProjectId(ProjectId);
        
        _addMembersPermission = UserDataService.HasProjectPermissions(ProjectId, ProjectPermissions.AddMembers);
        _removeMembersPermission = UserDataService.HasProjectPermissions(ProjectId, ProjectPermissions.RemoveMembers);
        _manageRolesPermission = UserDataService.HasProjectPermissions(ProjectId, ProjectPermissions.ManageRoles);

        await UpdateMembersVM();
        if(_manageRolesPermission)
        {
            _rolesVM = await ProjectsService.GetRoles(ProjectId);
        }
    }

    private async Task UpdateMembersVM()
    {
        _membersVM = await ProjectsService.GetMembers(ProjectId);

        var organizationId = (await ProjectsService.GetOrganization(ProjectId))?.OrganizationId ?? default;

        if(_addMembersPermission)
        {
            _usersVM = await UsersService.GetAvailableForProject(ProjectId, organizationId);
        }
    }

    private async Task AddMember(Guid userId)
    {
        var model = new AddProjectMemberDto(userId);
        _ = await ProjectsService.AddMember(ProjectId, model);

        _selectedUserVM = null;
        await UpdateMembersVM();
    }
}
