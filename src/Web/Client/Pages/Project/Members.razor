@page "/project/{projectId:guid}/members"
@layout ProjectLayout
@attribute [Authorize]

@inject ProjectService _projectService
@inject IAuthorizationService _authorizationService
@inject UserDataService _userDataService

<MudTabs Outlined="false" Border="true" ApplyEffectsToContainer="true" Color="Color.Default" Rounded="true" Position="Position.Top" Centered="false">
    <MudTabPanel Text="Members">
        @if (_usersVM is not null && _addMembersPermission)
        {
            <MudPaper>
                <div class="d-flex gap-2 align-end px-3 py-2">
                    <MudSelect Label="Users" @bind-Value="_selectedUserVM" Variant="Variant.Filled" Disabled="@(!_usersVM.Users.Any())">
                        @foreach (var user in _usersVM.Users)
                        {
                            <MudSelectItem Value="@user">@user.Email</MudSelectItem>
                        }
                    </MudSelect>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="height: 56px; width: 100px;" Disabled="@(_selectedUserVM is null)" OnClick="() => AddMember(_selectedUserVM!.Id)">Add</MudButton>
                </div>
                <MudDivider Class="mt-2"/>
            </MudPaper>
        }
        @if (_membersVM is not null)
        {
            <MembersList Members="@_membersVM.Members" ManageRolesPermission="_manageRolesPermission" RemoveMembersPermission="_removeMembersPermission" ApiUrl="@($"projects/{ProjectId}/members")" 
                MembersUpdated="UpdateMembersVM" RolesVM="@_rolesVM"></MembersList>
        }
    </MudTabPanel>
    @if (_manageRolesPermission)
    {
        <MudTabPanel Text="Roles">
            <RolesEditor RolesVM="@_rolesVM" TPermissions="ProjectPermissions" ApiUrl="@($"projects/{ProjectId}/roles")" RolesUpdated="UpdateRolesVM"></RolesEditor>
        </MudTabPanel>
    }
</MudTabs>

@code {
    [Parameter]
    public Guid ProjectId { get; init; }

    [CascadingParameter]
    public ProjectLayout Layout { get; set; } = null!;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; } = null!;

    private bool _addMembersPermission = false;
    private bool _removeMembersPermission = false;
    private bool _manageRolesPermission = false;

    private ProjectMembersVM? _membersVM;
    private UsersSearchVM? _usersVM;
    private UserSearchVM? _selectedUserVM;
    private RolesVM<ProjectPermissions>? _rolesVM;

    protected override async Task OnInitializedAsync()
    {
        await Layout.SetProjectId(ProjectId);

        var user = (await AuthenticationState).User;
        _addMembersPermission = _userDataService.HasProjectPermissions(ProjectId, ProjectPermissions.AddMembers);
        _removeMembersPermission = _userDataService.HasProjectPermissions(ProjectId, ProjectPermissions.RemoveMembers);
        _manageRolesPermission = _userDataService.HasProjectPermissions(ProjectId, ProjectPermissions.ManageRoles);

        await UpdateMembersVM();
        if(_manageRolesPermission)
        {
            await UpdateRolesVM();
        }
    }

    private async Task UpdateMembersVM()
    {
        _membersVM = await _projectService.GetMembers(ProjectId);

        var organizationId = (await _projectService.GetOrganization(ProjectId))?.OrganizationId ?? default;

        if(_addMembersPermission)
        {
            _usersVM = await _projectService.GetAvailableUsers(ProjectId, organizationId);
        }
    }

    private async Task UpdateRolesVM()
    {
        _rolesVM = await _projectService.GetRoles(ProjectId);
    }

    private async Task AddMember(Guid userId)
    {
        var model = new AddProjectMemberDto(userId);
        _ = await _projectService.AddMember(ProjectId, model);

        _selectedUserVM = null;
        await UpdateMembersVM();
    }
}
