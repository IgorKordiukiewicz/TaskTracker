@page "/project/{projectId:guid}/members"
@using global::Shared.Authorization;
@using global::Shared.Enums;
@layout ProjectLayout
@attribute [Authorize]

@inject RequestHandler _requestHandler
@inject IAuthorizationService _authorizationService

<MudTabs Outlined="false" Border="true" ApplyEffectsToContainer="true" Color="Color.Default" Rounded="true" Position="Position.Top" Centered="false">
    <MudTabPanel Text="Members">
        @if (_usersVM is not null && _isMembersEditor)
        {
            <div class="d-flex gap-2 align-center mb-4">
                <MudSelect Label="Users" @bind-Value="_selectedUserVM" Variant="Variant.Filled" Disabled="@(!_usersVM.Users.Any())">
                    @foreach (var user in _usersVM.Users)
                    {
                        <MudSelectItem Value="@user">@user.Email</MudSelectItem>
                    }
                </MudSelect>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="height: 50%;" Disabled="@(_selectedUserVM is null)" OnClick="() => AddMember(_selectedUserVM!.Id)">Add</MudButton>
            </div>
        }
        @if (_membersVM is not null)
        {
            <MembersList Members="@_membersVM.Members" IsMembersEditor="@_isMembersEditor" ApiUrl="@($"projects/{ProjectId}/members")" 
                MembersUpdated="UpdateMembersVM" RolesVM="@_rolesVM"></MembersList>
        }
    </MudTabPanel>
    <MudTabPanel Text="Roles">
        @if(_isMembersEditor)
        {
            <RolesEditor RolesVM="@_rolesVM" TPermissions="ProjectPermissions" ApiUrl="@($"projects/{ProjectId}/roles")" RolesUpdated="UpdateRolesVM"></RolesEditor>
        }
    </MudTabPanel>
</MudTabs>

@code {
    [Parameter]
    public Guid ProjectId { get; init; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; } = null!;

    private bool _isMembersEditor = false;

    private ProjectMembersVM? _membersVM;
    private UsersSearchVM? _usersVM;
    private UserSearchVM? _selectedUserVM;
    private RolesVM<ProjectPermissions>? _rolesVM;

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthenticationState).User;
        _isMembersEditor = (await _authorizationService.AuthorizeAsync(user, Policy.ProjectMembersEditor)).Succeeded;

        await UpdateMembersVM();
        if(_isMembersEditor)
        {
            await UpdateRolesVM();
        }
    }

    private async Task UpdateMembersVM()
    {
        _membersVM = await _requestHandler.GetAsync<ProjectMembersVM>($"projects/{ProjectId}/members");

        var organizationId = (await _requestHandler.GetAsync<ProjectOrganizationVM>($"projects/{ProjectId}/organization"))?.OrganizationId ?? default;

        if(_isMembersEditor)
        {
            var url = $"users/available-for-project/project/{ProjectId}"
            .SetQueryParam("organizationId", organizationId)
            .ToString();
            _usersVM = await _requestHandler.GetAsync<UsersSearchVM>(url);
        }
    }

    private async Task UpdateRolesVM()
    {
        _rolesVM = await _requestHandler.GetAsync<RolesVM<ProjectPermissions>>($"projects/{ProjectId}/roles");
    }

    private async Task AddMember(Guid userId)
    {
        var model = new AddProjectMemberDto(userId);
        await _requestHandler.PostAsync($"projects/{ProjectId}/members", model);

        _selectedUserVM = null;
        await UpdateMembersVM();
    }
}
