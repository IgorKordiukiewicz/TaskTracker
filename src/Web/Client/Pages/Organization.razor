@page "/org/{organizationId:guid}"
@attribute [Authorize]

@inject HttpClient _httpClient
@inject IDialogService _dialogService
@inject NavigationManager _navManager

<h2>
    @OrganizationId
</h2>

<MudPaper>
    <div class="d-flex">
        <MudTextField Label="Invite user" HelperText="Enter name" @bind-Value="_inviteUserSearch" />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => SearchUser()">Search</MudButton>
    </div>
    @if(_usersSearchVM is not null)
    {
        <MudList Clickable="true">
            @foreach (var user in _usersSearchVM.Users)
            {
                <MudListItem Text="@user.Name" OnClick="() => InviteUser(user.Id)" />
            }
        </MudList>
    }
    
    @if(_projectsVM is not null)
    {
        <MudText Typo="Typo.h5">
            Projects
        </MudText>
        <MudList Clickable="true">
            @foreach(var project in _projectsVM.Projects)
            {
                <MudListItem Text="@project.Name" OnClick="() => SelectProject(project.Id)"/>
            }
        </MudList>
        <MudPaper>
            <MudForm @ref="_createProjectForm" @bind-IsValid="_createProjectFormValid">
                <MudTextField @bind-Value="_createProjectFormName" Required="true" Label="Name" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_createProjectFormValid)" OnClick="CreateProject">Create</MudButton>
            </MudForm>
        </MudPaper>
    }
</MudPaper>


@code {
    [Parameter]
    public Guid OrganizationId { get; init; }

    private RequestHandler _requestHandler = null!;

    private string _inviteUserSearch = string.Empty;
    private UsersSearchVM? _usersSearchVM;
    private ProjectsVM? _projectsVM;

    private MudForm? _createProjectForm;
    private bool _createProjectFormValid;
    private string _createProjectFormName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _requestHandler = new(_httpClient, _dialogService);

        await UpdateProjectsList();
    }

    private async Task UpdateProjectsList()
    {
        var url = "projects".SetQueryParam("organizationId", OrganizationId).ToString();
        _projectsVM = await _requestHandler.GetAsync<ProjectsVM>(url);
    }

    private async Task SearchUser()
    {
        if (string.IsNullOrWhiteSpace(_inviteUserSearch))
        {
            return;
        }

        var url = "users/not-in-org"
            .SetQueryParam("organizationId", OrganizationId)
            .SetQueryParam("searchValue", _inviteUserSearch)
            .ToString();
        _usersSearchVM = await _requestHandler.GetAsync<UsersSearchVM>(url);
    }

    private async Task InviteUser(Guid userId)
    {
        var model = new CreateOrganizationInvitationDto(OrganizationId, userId);
        await _requestHandler.PostAsync("organizations/invitations/create", model);
    }

    private async Task CreateProject()
    {
        var model = new CreateProjectDto(_createProjectFormName, OrganizationId);
        await _requestHandler.PostAsync("projects", model);
        await UpdateProjectsList();
    }

    private void SelectProject(Guid projectId)
    {
        _navManager.NavigateTo($"/projects/{projectId}");
    }
}
