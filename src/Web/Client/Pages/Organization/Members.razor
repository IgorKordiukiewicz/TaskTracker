@page "/org/{organizationId:guid}/team/members"
@layout OrganizationLayout
@attribute [Authorize]

@inject OrganizationsService OrganizationsService
@inject UsersService UsersService
@inject IAuthorizationService AuthorizationService

@if (_membersVM is not null)
{
    <MembersList Members="@_membersVM.Members" RemoveMembersPermission="@_removeMembersPermission" ManageRolesPermission="@_manageRolesPermission" 
        MembersUpdated="UpdateMembersVM" RolesVM="@_rolesVM"
        UpdateRoleFunc="async (memberId, model) => await OrganizationsService.UpdateMemberRole(OrganizationId, memberId, model)"
        RemoveMemberFunc="async (memberId) => await OrganizationsService.RemoveMember(OrganizationId, memberId)"
    ></MembersList>
}

@code {
    [Parameter]
    public Guid OrganizationId { get; init; }

    [CascadingParameter]
    public OrganizationLayout Layout { get; set; } = null!;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; } = null!;

    private OrganizationMembersVM? _membersVM;
    private RolesVM<OrganizationPermissions>? _rolesVM;
    
    private bool _removeMembersPermission;
    private bool _manageRolesPermission;

    protected override async Task OnInitializedAsync()
    {
        await Layout.SetOrganizationId(OrganizationId);

        var user = (await AuthenticationState).User;
        
        _removeMembersPermission = (await AuthorizationService.AuthorizeAsync(user, Policy.OrganizationRemoveMembers)).Succeeded;
        _manageRolesPermission = (await AuthorizationService.AuthorizeAsync(user, Policy.OrganizationManageRoles)).Succeeded;

        _rolesVM = await OrganizationsService.GetRoles(OrganizationId);
        await UpdateMembersVM();
    }
    
    private async Task UpdateMembersVM()
    {
        _membersVM = await OrganizationsService.GetMembers(OrganizationId);
    }
}
