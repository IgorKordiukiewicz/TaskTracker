@page "/org/{organizationId:guid}/members"
@layout OrganizationLayout
@attribute [Authorize]

@inject RequestHandler _requestHandler
@inject IAuthorizationService _authorizationService

<MudTabs Outlined="false" Border="true" ApplyEffectsToContainer="true" Color="Color.Default" Rounded="true" Position="Position.Top" Centered="false">
    <MudTabPanel Text="Members">
        @if (_membersVM is not null)
        {
            <MembersList Members="@_membersVM.Members" RemoveMembersPermission="@_removeMembersPermission" ManageRolesPermission="@_manageRolesPermission" ApiUrl="@($"organizations/{OrganizationId}/members")" 
                MembersUpdated="UpdateMembersVM" RolesVM="@_rolesVM"></MembersList>
        }
    </MudTabPanel>
    @if (_inviteMembersPermission)
    {
        <MudTabPanel Text="Invitations">
            @if (_invitationsVM is not null)
            {
                <MudPaper>
                    <div class="d-flex gap-2 align-end px-3 py-2">
                        <MudAutocomplete T="UserSearchVM" Label="Invite Users" @bind-Value="_selectedUserForInvitation" SearchFunc="SearchUsers"
                                         ResetValueOnEmptyText="true" AdornmentIcon="@Icons.Material.Filled.Search" ToStringFunc="(user => user.Email)" Variant="Variant.Filled" />
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="height: 56px; width: 100px;" Disabled="@(_selectedUserForInvitation is null)" OnClick="SendInvitation">Invite</MudButton>
                    </div>
                    <MudDivider Class="mt-2" />
                    <MudList>
                        @foreach (var invitation in _invitationsVM.Invitations)
                        {
                            <MudListItem>
                                <div class="d-flex justify-space-between align-center">
                                    @invitation.UserEmail
                                    <div class="d-flex gap-1 show-on-hover-parent align-center">
                                        <MudIconButton Icon="@Icons.Material.Filled.Clear" Color="Color.Error" OnClick="() => CancelInvitation(invitation.Id)"
                                                       Class="@(invitation.State == OrganizationInvitationState.Pending ? "show-on-hover" : "invisible")"></MudIconButton>
                                        <MudChip Variant="Variant.Filled" Color="@GetInvitationStateColor(invitation.State)">@invitation.State.ToString()</MudChip>
                                    </div>
                                </div>
                            </MudListItem>
                        }
                    </MudList>
                </MudPaper>
            }
        </MudTabPanel>
    }
    @if (_manageRolesPermission)
    {
        <MudTabPanel Text="Roles">
            <RolesEditor RolesVM="@_rolesVM" TPermissions="OrganizationPermissions" ApiUrl="@($"organizations/{OrganizationId}/roles")" RolesUpdated="UpdateRolesVM"></RolesEditor>
        </MudTabPanel>
    }
</MudTabs>

@code {
    [Parameter]
    public Guid OrganizationId { get; init; }

    [CascadingParameter]
    public OrganizationLayout Layout { get; set; } = null!;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; } = null!;

    private OrganizationMembersVM? _membersVM;
    private OrganizationInvitationsVM? _invitationsVM;
    private RolesVM<OrganizationPermissions>? _rolesVM;

    private UserSearchVM? _selectedUserForInvitation;

    private bool _inviteMembersPermission = false;
    private bool _removeMembersPermission = false;
    private bool _manageRolesPermission = false;

    protected override async Task OnInitializedAsync()
    {
        await Layout.SetOrganizationId(OrganizationId);

        var user = (await AuthenticationState).User;

        _inviteMembersPermission = (await _authorizationService.AuthorizeAsync(user, Policy.OrganizationInviteMembers)).Succeeded;
        _removeMembersPermission = (await _authorizationService.AuthorizeAsync(user, Policy.OrganizationRemoveMembers)).Succeeded;
        _manageRolesPermission = (await _authorizationService.AuthorizeAsync(user, Policy.OrganizationManageRoles)).Succeeded;

        await UpdateMembersVM();

        if(_inviteMembersPermission)
        {
            await UpdateInvitationsVM();
        }

        if(_manageRolesPermission)
        {
            await UpdateRolesVM();            
        }
    }

    private async Task UpdateMembersVM()
    {
        _membersVM = await _requestHandler.GetAsync<OrganizationMembersVM>($"organizations/{OrganizationId}/members");
    }

    private async Task UpdateInvitationsVM()
    {
        _invitationsVM = await _requestHandler.GetAsync<OrganizationInvitationsVM>($"organizations/{OrganizationId}/invitations");
    }

    private async Task UpdateRolesVM()
    {
        _rolesVM = await _requestHandler.GetAsync<RolesVM<OrganizationPermissions>>($"organizations/{OrganizationId}/roles");
    }

    private async Task<IEnumerable<UserSearchVM>> SearchUsers(string value)
    {
        if(string.IsNullOrWhiteSpace(value))
        {
            return Enumerable.Empty<UserSearchVM>();
        }

        var url = $"users/available-for-invitation/organization/{OrganizationId}"
            .SetQueryParam("searchValue", value)
            .ToString();
        var users = await _requestHandler.GetAsync<UsersSearchVM>(url);
        return users?.Users ?? Enumerable.Empty<UserSearchVM>();
    }

    private async Task SendInvitation()
    {
        if(_selectedUserForInvitation is null)
        {
            return;
        }

        var model = new CreateOrganizationInvitationDto(_selectedUserForInvitation.Id);
        await _requestHandler.PostAsync($"organizations/{OrganizationId}/invitations", model);

        _selectedUserForInvitation = null;

        await UpdateInvitationsVM();
    }

    private async Task CancelInvitation(Guid invitationId)
    {
        await _requestHandler.PostAsync($"organizations/invitations/{invitationId}/cancel", 
            headers: new[] { ("OrganizationId", OrganizationId.ToString()) });
        await UpdateInvitationsVM();
    }

    private Color GetInvitationStateColor(OrganizationInvitationState state)
        => state switch
        {
            OrganizationInvitationState.Pending => Color.Default,
            OrganizationInvitationState.Accepted => Color.Success,
            OrganizationInvitationState.Declined => Color.Error,
            OrganizationInvitationState.Canceled => Color.Warning,
            _ => Color.Default
        };
}
