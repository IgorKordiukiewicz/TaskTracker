@page "/org/{organizationId:guid}/projects"
@page "/org/{organizationId:guid}/"
@using Web.Client.Common;
@using global::Shared.Authorization;
@layout OrganizationLayout 
@attribute [Authorize]

@inject NavigationManager _navManager
@inject RequestHandler _requestHandler
@inject IAuthorizationService _authorizationService

@if (_projectsVM is not null)
{
    <MudGrid>
        @if(_isProjectsEditor)
        {
            <MudItem lg="3" sm="6">
                <MudPaper Class="d-flex flex-column align-center justify-center project-card" onclick="@(() => _createProjectForm.Open())">
                    <MudText Align="Align.Center">
                        Create a new project
                    </MudText>
                    <MudIcon Icon="@Icons.Material.Filled.Add" Size="Size.Large" />
                </MudPaper>
            </MudItem>
        }
        @foreach (var project in _projectsVM.Projects)
        {
            <MudItem lg="3" sm="6">
                <MudCard Class="project-card" onclick="@(() => SelectProject(project.Id))">
                    <MudCardContent>
                        <MudText Typo="Typo.h6">
                            @project.Name
                        </MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}

<Dialog Title="Create a new project" Form="_createProjectForm" OnConfirm="CreateProject">
    <MudTextField @bind-Value="@_createProjectForm.Name" Label="Name" Required="true" Variant="Variant.Filled" />
</Dialog>

@code {
    [Parameter]
    public Guid OrganizationId { get; init; }

    [CascadingParameter]
    public OrganizationLayout Layout { get; set; } = null!;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; } = null!;

    private bool _isProjectsEditor = false;

    private ProjectsVM? _projectsVM;

    private class CreateProjectForm : DialogForm
    {
        public string Name { get; set; } = string.Empty;

        public override bool IsValid() => !string.IsNullOrWhiteSpace(Name);
    }
    private CreateProjectForm _createProjectForm = new();

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthenticationState).User;
        _isProjectsEditor = (await _authorizationService.AuthorizeAsync(user, Policy.OrganizationProjectsEditor)).Succeeded;

        await Layout.SetOrganizationId(OrganizationId);

        await UpdateProjectsList();
    }

    private async Task UpdateProjectsList()
    {
        _projectsVM = await _requestHandler.GetAsync<ProjectsVM>($"projects/organization/{OrganizationId}/user");
    }

    private void SelectProject(Guid projectId)
    {
        _navManager.NavigateTo($"/project/{projectId}");
    }

    private async Task CreateProject()
    {
        if(!_createProjectForm.IsValid())
        {
            return;
        }

        var model = new CreateProjectDto(_createProjectForm.Name);
        await _requestHandler.PostAsync($"projects/organization/{OrganizationId}", model);
        await UpdateProjectsList();
        _createProjectForm.Visible = false;
    }
}
