@page "/org/{organizationId:guid}/projects"
@page "/org/{organizationId:guid}/"
@layout OrganizationLayout 
@attribute [Authorize]

@inject NavigationManager NavManager
@inject ProjectsService ProjectsService
@inject IAuthorizationService AuthorizationService
@inject UserDataService UserDataService

<PageHeading Content="Projects">
    @if (_createProjectsPermission)
    {
        <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => _createProjectForm.Open())">Create</MudButton>
    }
</PageHeading>

@if (_projectsVM is not null)
{
    @if(_projectsVM.Projects.Any())
    {
        <div class="d-flex flex-column gap-4">
            @foreach (var project in _projectsVM.Projects)
            {
                <MudPaper Class="project-card" onclick="@(() => SelectProject(project.Id))">
                    <MudText Typo="Typo.h6">
                        @project.Name
                    </MudText>
                </MudPaper>
            }
        </div>
    }
    else
    {
        <MudText>
            You have not been added to any projects yet.
        </MudText>
    }
}

<FormDialog Title="Create a project" Form="_createProjectForm" OnConfirm="CreateProject">
    <LabeledInput Label="Name" Required="true">
        <MudTextField @bind-Value="@_createProjectForm.Name" Required="true" Variant="Variant.Outlined" Class="input-outlined-dark" />
    </LabeledInput>
</FormDialog>

@code {
    [Parameter]
    public Guid OrganizationId { get; init; }

    [CascadingParameter]
    public OrganizationLayout Layout { get; set; } = null!;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; } = null!;

    private bool _createProjectsPermission;

    private ProjectsVM? _projectsVM;

    private class CreateProjectForm : Form
    {
        public string Name { get; set; } = string.Empty;

        public override bool IsValid() => !string.IsNullOrWhiteSpace(Name);
    }
    private CreateProjectForm _createProjectForm = new();

    protected override async Task OnInitializedAsync()
    {
        await Layout.SetOrganizationId(OrganizationId);

        var user = (await AuthenticationState).User;
        _createProjectsPermission = (await AuthorizationService.AuthorizeAsync(user, Policy.OrganizationCreateProjects)).Succeeded;

        await UpdateProjectsList();
    }

    private async Task UpdateProjectsList()
    {
        _projectsVM = await ProjectsService.GetForOrganizationUser(OrganizationId);
    }

    private void SelectProject(Guid projectId)
    {
        NavManager.NavigateTo($"/project/{projectId}/tasks/table");
    }

    private async Task CreateProject()
    {
        if(!_createProjectForm.IsValid())
        {
            return;
        }

        var model = new CreateProjectDto(_createProjectForm.Name);
        var result = await ProjectsService.Create(OrganizationId, model);
        if(result)
        {
            await UserDataService.UpdateUserData();
            await UpdateProjectsList();
            _createProjectForm = new();
        }  
    }
}
