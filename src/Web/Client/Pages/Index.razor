@page "/"
@attribute [Authorize]

@inject HttpClient _httpClient
@inject IDialogService _dialogService
@inject NavigationManager _navManager

@if(_organizations is not null)
{
    <MudPaper>
        <MudList Clickable="true">
            @foreach (var organization in _organizations.Organizations)
            {
                <MudListItem Text="@organization.Name" OnClick="() => SelectOrganization(organization.Id)" />
            }
        </MudList>
    </MudPaper>
}
@if(_invitations is not null)
{
    <MudPaper Class="mt-2">
        <MudList>
            @foreach(var invitation in _invitations.Invitations)
            {
                <MudListItem Class="d-flex">
                    <MudText>
                        @invitation.OrganizationName
                    </MudText>
                    <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="() => AcceptInvitation(invitation.Id)">
                        Accept
                    </MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="() => DeclineInvitation(invitation.Id)">
                        Decline
                    </MudButton>
                </MudListItem>
            }
        </MudList>
    </MudPaper>
}

@code {
    private RequestHandler _requestHandler = null!;

    private OrganizationsForUserVM? _organizations;
    private OrganizationInvitationsVM? _invitations;

    protected override async Task OnInitializedAsync()
    {
        _requestHandler = new(_httpClient, _dialogService);
        _organizations = await _requestHandler.GetAsync<OrganizationsForUserVM>("organizations/user");
        _invitations = await _requestHandler.GetAsync<OrganizationInvitationsVM>("organizations/invitations/user");
    }

    private void SelectOrganization(Guid organizationId)
    {
        _navManager.NavigateTo($"/org/{organizationId}");
    }

    private async Task AcceptInvitation(Guid invitationId)
    {
        await _requestHandler.PostAsync($"organizations/invitations/{invitationId}/accept", (object?)null); // TODO: Improve handling post requests without bodies
    }

    private async Task DeclineInvitation(Guid invitationId)
    {
        await _requestHandler.PostAsync($"organizations/invitations/{invitationId}/decline", (object?)null);
    }
}
