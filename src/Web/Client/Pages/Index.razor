@page "/"
@attribute [Authorize]

@inject NavigationManager _navManager
@inject RequestHandler _requestHandler
@inject IDialogService _dialogService
@inject HierarchyNavigationService _hierarchyNavigationService
@inject UserDataService _userDataService

@if(_organizationsVM is not null)
{
    <div class="d-flex align-center justify-space-between">
        <div class="d-flex align-center">
            <MudText Typo="Typo.h5">
                Organizations
            </MudText>
            <MudIconButton Icon="@GetOrganizationInvitationsIcon()" Disabled="@(!HasOrganizationInvitations())" OnClick="OpenInvitationsDialog"></MudIconButton>
        </div>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => _createOrganizationForm.Open()">
            Create Organization
        </MudButton>
    </div>
    <MudDivider Class="mb-4 mt-1" />
    <div class="d-flex flex-column gap-4">
        @foreach (var organization in _organizationsVM.Organizations)
        {
            <MudPaper Class="organization-card" onclick="@(() => SelectOrganization(organization.Id))">
                <MudText Typo="Typo.h6">
                    @organization.Name
                </MudText>
            </MudPaper>
        }
    </div>
}

<Dialog Title="Create a new organization" Form="_createOrganizationForm" OnConfirm="CreateOrganization">
    <MudTextField @bind-Value="@_createOrganizationForm.Name" Label="Name" Required="true" Variant="Variant.Filled" />
</Dialog>

@code {
    private UserOrganizationInvitationsVM? _invitationsVM;
    private OrganizationsForUserVM? _organizationsVM;

    private class CreateOrganizationForm : DialogForm
    {
        public string Name { get; set; } = string.Empty;

        public override bool IsValid() => !string.IsNullOrWhiteSpace(Name);
    }
    private CreateOrganizationForm _createOrganizationForm = new();

    protected override async Task OnInitializedAsync()
    {
        _hierarchyNavigationService.OpenIndexPage();
        await UpdateViewModels();
    }

    private void SelectOrganization(Guid organizationId)
    {
        _navManager.NavigateTo($"/org/{organizationId}/projects");
    }

    private async Task OpenInvitationsDialog()
    {
        if(_invitationsVM is null)
        {
            return;
        }

        var parameters = new DialogParameters();
        parameters.Add("Invitations", _invitationsVM.Invitations.ToList());
        parameters.Add("RequestHandler", _requestHandler);

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
        };

        var dialogRef = await _dialogService.ShowAsync<InvitationsDialog>("Invitations", parameters, options);
        var dialog = (dialogRef.Dialog as InvitationsDialog)!;
        var result = await dialogRef.Result;

        if(dialog.AnyInvitationHandled)
        {
            await UpdateViewModels();
        }
    }

    private async Task UpdateViewModels()
    {
        _organizationsVM = await _requestHandler.GetAsync<OrganizationsForUserVM>("organizations/user");
        _invitationsVM = await _requestHandler.GetAsync<UserOrganizationInvitationsVM>("organizations/invitations/user");
    }

    private async Task CreateOrganization()
    {
        if(!_createOrganizationForm.IsValid())
        {
            return;
        }

        var userId = _userDataService.CurrentUserVM?.Id;
        if(userId is null)
        {
            return;
        }

        var model = new CreateOrganizationDto(_createOrganizationForm.Name, userId.Value);
        var result = await _requestHandler.PostWithResultAsync($"organizations", model);
        if(result)
        {
            await _userDataService.UpdateUserData();
            await UpdateViewModels();
            _createOrganizationForm = new();
        }
    }

    private bool HasOrganizationInvitations() 
        => _invitationsVM is not null && _invitationsVM.Invitations.Any();

    private string GetOrganizationInvitationsIcon() 
        => HasOrganizationInvitations() ? @Icons.Material.Filled.NotificationsActive : Icons.Material.Filled.NotificationsNone;
}
