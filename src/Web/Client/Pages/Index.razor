@page "/"
@attribute [Authorize]

@inject NavigationManager _navManager
@inject RequestHandler _requestHandler
@inject IDialogService _dialogService
@inject HierarchyNavigationService _hierarchyNavigationService

@if(_organizationsVM is not null)
{
    <div class="d-flex align-center">
        <MudText Typo="Typo.h5">
            Organizations
        </MudText>
        <MudIconButton Icon="@GetOrganizationInvitationsIcon()" Disabled="@(!HasOrganizationInvitations())" OnClick="OpenInvitationsDialog"></MudIconButton>
    </div>
    <MudDivider Class="mb-4 mt-1" />
    <div class="d-flex flex-column gap-4">
        @foreach (var organization in _organizationsVM.Organizations)
        {
            <MudPaper Class="organization-card" onclick="@(() => SelectOrganization(organization.Id))">
                <MudText Typo="Typo.h6">
                    @organization.Name
                </MudText>
            </MudPaper>
        }
    </div>
}

@code {
    private UserOrganizationInvitations? _invitations;
    private OrganizationsForUserVM? _organizationsVM;

    protected override async Task OnInitializedAsync()
    {
        _hierarchyNavigationService.OpenIndexPage();
        await UpdateViewModels();
    }

    private void SelectOrganization(Guid organizationId)
    {
        _navManager.NavigateTo($"/org/{organizationId}");
    }

    private async Task OpenInvitationsDialog()
    {
        if(_invitations is null)
        {
            return;
        }

        var parameters = new DialogParameters();
        parameters.Add("Invitations", _invitations.Invitations.ToList());
        parameters.Add("RequestHandler", _requestHandler);

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
        };

        var dialogRef = await _dialogService.ShowAsync<InvitationsDialog>("Invitations", parameters, options);
        var dialog = (dialogRef.Dialog as InvitationsDialog)!;
        var result = await dialogRef.Result;

        if(dialog.AnyInvitationHandled)
        {
            await UpdateViewModels();
        }
    }

    private async Task UpdateViewModels()
    {
        _organizationsVM = await _requestHandler.GetAsync<OrganizationsForUserVM>("organizations/user");
        _invitations = await _requestHandler.GetAsync<UserOrganizationInvitations>("organizations/invitations/user");
    }

    private bool HasOrganizationInvitations() 
        => _invitations is not null && _invitations.Invitations.Any();

    private string GetOrganizationInvitationsIcon() 
        => HasOrganizationInvitations() ? @Icons.Material.Filled.NotificationsActive : Icons.Material.Filled.NotificationsNone;
}
