@page "/"
@attribute [Authorize]

@inject HttpClient _httpClient
@inject IDialogService _dialogService
@inject NavigationManager _navManager

@if(_organizations is not null)
{
    <div class="d-flex align-center">
        <MudText Typo="Typo.h5">
            Organizations
        </MudText>
        <MudIconButton Icon="@GetOrganizationInvitationsIcon()" Disabled="@(!HasOrganizationInvitations())" OnClick="OpenInvitationsDialog"></MudIconButton>
    </div>
    <MudDivider Class="mb-4 mt-1" />
    <MudGrid>
        @foreach (var organization in _organizations.Organizations)
        {
            <MudItem lg="3" sm="6">
                <MudCard Style="height: 200px; cursor: pointer;" onclick="@(() => SelectOrganization(organization.Id))">
                    <MudCardContent>
                        <MudText Typo="Typo.h6">
                            @organization.Name
                        </MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}

@code {
    private RequestHandler _requestHandler = null!;

    private UserOrganizationInvitations? _invitations;
    private OrganizationsForUserVM? _organizations;

    protected override async Task OnInitializedAsync()
    {
        _requestHandler = new(_httpClient, _dialogService);

        await UpdateViewModels();
    }

    private void SelectOrganization(Guid organizationId)
    {
        _navManager.NavigateTo($"/org/{organizationId}");
    }

    private async Task OpenInvitationsDialog()
    {
        if(_invitations is null)
        {
            return;
        }

        var parameters = new DialogParameters();
        parameters.Add("Invitations", _invitations.Invitations.ToList());
        parameters.Add("RequestHandler", _requestHandler);

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
        };

        var dialogRef = await _dialogService.ShowAsync<InvitationsDialog>("Invitations", parameters, options);
        var dialog = (dialogRef.Dialog as InvitationsDialog)!;
        var result = await dialogRef.Result;

        if(dialog.AnyInvitationHandled)
        {
            await UpdateViewModels();
        }
    }

    private async Task UpdateViewModels()
    {
        _organizations = await _requestHandler.GetAsync<OrganizationsForUserVM>("organizations/user");
        _invitations = await _requestHandler.GetAsync<UserOrganizationInvitations>("organizations/invitations/user");
    }

    private bool HasOrganizationInvitations() 
        => _invitations is not null && _invitations.Invitations.Any();

    private string GetOrganizationInvitationsIcon() 
        => HasOrganizationInvitations() ? @Icons.Material.Filled.NotificationsActive : Icons.Material.Filled.NotificationsNone;
}
